["```py\nMultiLayerConfiguration configuration = new NeuralNetConfiguration.Builder()\n .weightInit(WeightInit.RELU_UNIFORM)\n .updater(new Nesterovs(0.008,0.9))\n .list()\n .layer(new DenseLayer.Builder().nIn(layerOneInputNeurons).nOut(layerOneOutputNeurons).activation(Activation.RELU).dropOut(dropOutRatio).build())\n .layer(new DenseLayer.Builder().nIn(layerTwoInputNeurons).nOut(layerTwoOutputNeurons).activation(Activation.RELU).dropOut(0.9).build())\n .layer(new OutputLayer.Builder(new LossMCXENT(weightsArray))\n .nIn(layerThreeInputNeurons).nOut(numberOfLabels).activation(Activation.SOFTMAX).build())\n .backprop(true).pretrain(false)\n .build();\n```", "```py\npublic ComputationGraph(ComputationGraphConfiguration configuration) {\n this.configuration = configuration;\n this.numInputArrays = configuration.getNetworkInputs().size();\n this.numOutputArrays = configuration.getNetworkOutputs().size();\n this.inputs = new INDArray[numInputArrays];\n this.labels = new INDArray[numOutputArrays];\n this.defaultConfiguration = configuration.getDefaultConfiguration();//Additional source is omitted from here. Refer to https://github.com/deeplearning4j/deeplearning4j\n}\n```", "```py\npublic class ConvolutionLayer extends FeedForwardLayer\n```", "```py\npublic static final Activation RELU\n```", "```py\npublic static final Activation RELU6\n```", "```py\npublic static final Activation RRELU\n```", "```py\npublic static final Activation THRESHOLDEDRELU\n```", "```py\nKFoldIterator kFoldIterator = new KFoldIterator(k, dataSet);\n```", "```py\npublic RecordReaderDataSetIterator(RecordReader recordReader,\n WritableConverter converter,\n int batchSize,\n int labelIndexFrom,\n int labelIndexTo,\n int numPossibleLabels,\n int maxNumBatches,\n boolean regression)\n```", "```py\nexport PATH=/opt/apache-maven-3.x.x/bin:$PATH\nexport PATH=${PATH}:/usr/java/jdk1.x.x/bin\n```", "```py\nset PATH=\"C:/Program Files/Apache Software Foundation/apache-maven-3.x.x/bin:%PATH%\"\n set PATH=\"C:/Program Files/Java/jdk1.x.x/bin:%PATH%\"\n```", "```py\n<dependency>\n <groupId>org.deeplearning4j</groupId>\n <artifactId>deeplearning4j-core</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n\n```", "```py\n<dependency>\n <groupId>org.nd4j</groupId>\n <artifactId>nd4j-native-platform</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n\n```", "```py\n<dependency>\n <groupId>org.datavec</groupId>\n <artifactId>datavec-api</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\n<dependency>\n <groupId>org.slf4j</groupId>\n <artifactId>slf4j-simple</artifactId>\n <version>1.7.25</version> //change to latest version\n </dependency> \n```", "```py\nnano /home/username/.bashrc\n export PATH=/usr/local/cuda-9.2/bin${PATH:+:${PATH}}$\n\n export LD_LIBRARY_PATH=/usr/local/cuda-9.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\n source .bashrc\n\n```", "```py\n<dependency>\n <groupId>org.nd4j</groupId>\n <artifactId>nd4j-cuda-9.2</artifactId>\n <version>1.0.0-beta3</version>\n </dependency> \n```", "```py\n<dependency>\n <groupId>org.deeplearning4j</groupId>\n <artifactId>deeplearning4j-cuda-9.2</artifactId>\n <version>1.0.0-beta3</version>\n </dependency> \n```", "```py\n<dependency>\n <groupId>org.bytedeco.javacpp-presets</groupId>\n <artifactId>cuda</artifactId>\n <version>9.2-7.1-1.4.2</version>\n <classifier>linux-x86_64-redist</classifier> //system specific\n </dependency>\n```", "```py\nCudaEnvironment.getInstance().getConfiguration().allowMultiGPU(true);\n```", "```py\nLogger log = LoggerFactory.getLogger(\"YourClassFile.class\");\n log.setLevel(Level.DEBUG);\n```", "```py\nrm -rf ~/.m2/repository/org/deeplearning4j\n rm -rf ~/.m2/repository/org/datavec\n mvn clean install\n```", "```py\nroot@instance-1:/home/Deeplearning4J# java -jar target/dl4j-1.0-SNAPSHOT.jar\n 09:28:22.171 [main] INFO org.nd4j.linalg.factory.Nd4jBackend - Loaded [JCublasBackend] backend\n Exception in thread \"main\" java.lang.NoClassDefFoundError: org/nd4j/linalg/api/complex/IComplexDouble\n at java.lang.Class.forName0(Native Method)\n at java.lang.Class.forName(Class.java:264)\n at org.nd4j.linalg.factory.Nd4j.initWithBackend(Nd4j.java:5529)\n at org.nd4j.linalg.factory.Nd4j.initContext(Nd4j.java:5477)\n at org.nd4j.linalg.factory.Nd4j.(Nd4j.java:210)\n at org.datavec.image.transform.PipelineImageTransform.(PipelineImageTransform.java:93)\n at org.datavec.image.transform.PipelineImageTransform.(PipelineImageTransform.java:85)\n at org.datavec.image.transform.PipelineImageTransform.(PipelineImageTransform.java:73)\n at examples.AnimalClassifier.main(AnimalClassifier.java:72)\n Caused by: java.lang.ClassNotFoundException: org.nd4j.linalg.api.complex.IComplexDouble\n```", "```py\no.d.n.l.c.ConvolutionLayer - Could not load CudnnConvolutionHelper\n java.lang.UnsatisfiedLinkError: no jnicudnn in java.library.path\n at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867) ~[na:1.8.0_102]\n at java.lang.Runtime.loadLibrary0(Runtime.java:870) ~[na:1.8.0_102]\n at java.lang.System.loadLibrary(System.java:1122) ~[na:1.8.0_102]\n at org.bytedeco.javacpp.Loader.loadLibrary(Loader.java:945) ~[javacpp-1.3.1.jar:1.3.1]\n at org.bytedeco.javacpp.Loader.load(Loader.java:750) ~[javacpp-1.3.1.jar:1.3.1]\n Caused by: java.lang.UnsatisfiedLinkError: C:\\Users\\JÃ¼rgen.javacpp\\cache\\cuda-7.5-1.3-windows-x86_64.jar\\org\\bytedeco\\javacpp\\windows-x86_64\\jnicudnn.dll: Can't find dependent libraries\n at java.lang.ClassLoader$NativeLibrary.load(Native Method) ~[na:1.8.0_102]\n```", "```py\ntry {\n Loader.load(<module>.class);\n } catch (UnsatisfiedLinkError e) {\n String path = Loader.cacheResource(<module>.class, \"windows-x86_64/jni<module>.dll\").getPath();\n new ProcessBuilder(\"c:/path/to/DependenciesGui.exe\", path).start().waitFor();\n }\n```"]