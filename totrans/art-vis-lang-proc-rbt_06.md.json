["```py\n    mkdir -p ~/catkin_ws/src\n    cd ~/catkin_ws\n    ```", "```py\n    catkin_make\n    ```", "```py\nsource devel/setup.bash\n```", "```py\n    cd ~/catkin_ws/src\n    ```", "```py\n    catkin_create_pkg <package_name> [dependencies]\n    ```", "```py\ncatkin_create_pkg my_python_pkg rospy\n```", "```py\n    roscore\n    ```", "```py\n    catkin_create_pkg exercise20 rospy std_msgs\n    ```", "```py\n    cd ~/catkin_ws/src/exercise20\n    mkdir –p scripts\n    ```", "```py\n    cd scripts\n    touch publisher.py\n    touch subscriber.py\n    ```", "```py\n    chmod +x publisher.py\n    chmod +x subscriber.py\n    ```", "```py\n    #!/usr/bin/env python\n    import rospy\n    from std_msgs.msg import String\n    ```", "```py\n    def publisher():\n    ```", "```py\n        pub  =rospy.Publisher('publisher_topic', String, queue_size=1)\n    ```", "```py\n        rospy.init_node('publisher', anonymous=True)\n    ```", "```py\n        pub.publish(\"Sending message\")\n    ```", "```py\n    if __name__ == '__main__':\n        publisher()\n    ```", "```py\n    #!/usr/bin/env python\n    import rospy\n    from std_msgs.msg import String\n    ```", "```py\n    def subscriber():\n    ```", "```py\n        rospy.init_node('subscriber', anonymous=True)\n    ```", "```py\n        rospy.Subscriber('publisher_topic', String, callback)\n    ```", "```py\n        rospy.spin()\n    ```", "```py\n    def callback(data):\n        if(data != None):\n            print(\"Message received\")\n            rospy.signal_shutdown(\"Message received\")\n    ```", "```py\n        if __name__ == '__main__':\n            subscriber()\n    ```", "```py\n    source devel/setup.bash\n    ```", "```py\n    rosrun exercise20 subscriber.py\n    ```", "```py\n    rosrun exercise20 publisher.py\n    ```", "```py\n    cd ~/catkin_ws/src\n    catkin_create_pkg exercise21 rospy std_msgs\n    cd exercise21\n    mkdir scripts\n    cd scripts\n    touch generator.py\n    touch finder.py\n    chmod +x generator.py finder.py\n    ```", "```py\n    #!/usr/bin/env python\n    import rospy\n    from std_msgs.msg import Int32\n    import random\n    ```", "```py\n    def generate():\n    ```", "```py\n        pub = rospy.Publisher('numbers_topic', Int32, queue_size=10)\n        rospy.init_node('generator', anonymous=True)\n    ```", "```py\n        rate = rospy.Rate(10)\n    ```", "```py\n        while not rospy.is_shutdown():\n            num = random.randint(1,101)\n            pub.publish(num)\n            rate.sleep()\n    ```", "```py\n    if __name__ == '__main__':\n        try:\n            generate()\n        except rospy.ROSInterruptException:\n            pass\n    ```", "```py\n    #!/usr/bin/env python\n    import rospy\n    from std_msgs.msg import Int32\n    ```", "```py\n    class Finder:\n        searched_number = 50\n        generated_numbers = 0\n    ```", "```py\n        def callback(self, data):\n            if data.data == self.searched_number:\n                print(str(data.data) + \": YES\")\n                self.generated_numbers += 1\n                print(\"The searched number has been found after \" + str(self.generated_numbers) + \" tries\")\n                rospy.signal_shutdown(\"Number found\")\n            elifself.generated_numbers>= 1000:\n    print(\"It wasn't possible to find the searched number\")\n                rospy.signal_shutdown(\"Number not found\")\n    else:\n                print(str(data.data) + \": NO\")\n                self.generated_numbers += 1\n    ```", "```py\n        def finder(self):\n            rospy.init_node('finder', anonymous=True)\n            rospy.Subscriber('numbers_topic', Int32, self.callback)\n            rospy.spin()\n    ```", "```py\n    if __name__ == '__main__':\n        find = Finder()\n        find.finder()\n    ```", "```py\n    cd ~/catkin_ws\n    source devel/setup.bash\n    rosrun exercise21 finder.py\n    ```", "```py\n    cd ~/catkin_ws\n    source devel/setup.bash\n    rosrun exercise21 generator.py\n    ```", "```py\n    sudo apt-get installros-kinetic-turtlebotros-kinetic-turtlebot-apps ros-kinetic-turtlebot-interactions ros-kinetic-turtlebot-simulator ros-kinetic-kobuki-ftdiros-kinetic-ar-track-alvar-msgs\n    ```", "```py\n    cd ~/catkin_ws/src\n    git clone https://github.com/PacktPublishing/Artificial-Vision-and-Language-Processing-for-Robotics/blob/master/Lesson06/turtlebot_simulator.zip\n    ```", "```py\n    roscore\n    ```", "```py\n    cd ~/catkin_ws\n    source devel/setup.bash\n    roslaunch turtlebot_gazebo turtlebot_world.launch\n    ```", "```py\n    cd ~/catkin_ws/src\n    catkin_create_pkg exercise22 rospy sensor_msgs\n    cd exercise22\n    mkdir scripts\n    cd scripts\n    touch exercise22.py\n    chmod +x exercise22.py\n    ```", "```py\n    #!/usr/bin/env python\n    import rospy\n    from sensor_msgs.msg import Image\n    import cv2\n    from cv_bridge import CvBridge\n    ```", "```py\n    class ObtainImage:\n        bridge = CvBridge()\n    ```", "```py\n        def callback(self, data):\n            cv_image = self.bridge.imgmsg_to_cv2(data, \"bgr8\")\n            cv2.imshow('Image',cv_image)\n            cv2.waitKey(0)\n            rospy.signal_shutdown(\"Finishing\")\n    ```", "```py\n        def obtain(self):\n                rospy.Subscriber('/camera/rgb/image_raw', Image, self.callback)\n                rospy.init_node('image_obtainer', anonymous=True)\n                rospy.spin()\n    ```", "```py\n    if __name__ == '__main__':\n        obt = ObtainImage()\n        obt.obtain()\n    ```", "```py\n    roscore\n    roslaunch turtlebot_gazebo turtlebot_world.launch\n    rosrun exercise22 exercise22.py\n    ```"]