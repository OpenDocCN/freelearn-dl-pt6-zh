["```py\nStrikerLearning:\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 128\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256\n    summary_freq: 2000\n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n\nGoalieLearning:\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 320\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256\n    summary_freq: 2000\n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=soccer --train\n```", "```py\nvoid OnCollisionEnter(Collision collision)\n{\n  if (collision.gameObject.CompareTag(\"banana\"))\n  {\n    Satiate();\n    collision.gameObject.GetComponent<BananaLogic>().OnEaten();\n    AddReward(1f);\n    bananas += 1;\n    if (contribute)\n    {\n      myAcademy.totalScore += 1;\n    }\n  }\n if (collision.gameObject.CompareTag(\"badBanana\"))\n {\n   Poison();\n   collision.gameObject.GetComponent<BananaLogic>().OnEaten();\n\n   AddReward(-1f);\n   if (contribute)\n   {\n     myAcademy.totalScore -= 1;\n   }\n  }\n}\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=banana --train\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=soccer_mb --train\n```", "```py\nBlueStrikerLearning:\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 128\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256\n    summary_freq: 2000\n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n BlueGoalieLearning:\n use_curiosity: true\n summary_freq: 1000\n curiosity_strength: 0.01\n curiosity_enc_size: 256\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 320\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256 \n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n\nRedStrikerLearning:\n    use_curiosity: true\n summary_freq: 1000\n curiosity_strength: 0.01\n curiosity_enc_size: 256\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 128\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256 \n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n\nRedGoalieLearning:\n    max_steps: 5.0e5\n    learning_rate: 1e-3\n    batch_size: 320\n    num_epoch: 3\n    buffer_size: 2000\n    beta: 1.0e-2\n    hidden_units: 256\n    summary_freq: 2000\n    time_horizon: 128\n    num_layers: 2\n    normalize: false\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=soccer_icl --train\n```", "```py\npublic enum AgentRole\n{\n  striker,goalie\n} *//after this line*\npublic enum PersonRole\n{\n girl, boy, police, zombie\n}\n```", "```py\npublic AgentRole agentRole; *//after this line*\npublic PersonRole playerRole;\n```", "```py\npublic override void InitializeAgent()\n{\n  base.InitializeAgent();\n  agentRenderer = GetComponent<Renderer>();\n  rayPer = GetComponent<RayPerception>();\n  academy = FindObjectOfType<SoccerAcademy>();\n  PlayerState playerState = new PlayerState();\n  playerState.agentRB = GetComponent<Rigidbody>();\n  agentRB = GetComponent<Rigidbody>();\n  agentRB.maxAngularVelocity = 500;\n  playerState.startingPos = transform.position;\n  playerState.agentScript = this;\n  area.playerStates.Add(playerState);\n  playerIndex = area.playerStates.IndexOf(playerState);\n  playerState.playerIndex = playerIndex;\n  playerState.personRole = personRole;  *//add this line*\n}\n```", "```py\n[System.Serializable]\npublic class PlayerState\n{\n  public int playerIndex; \n  public Rigidbody agentRB; \n  public Vector3 startingPos; \n  public AgentSoccer agentScript; \n  public float ballPosReward;\n  public string position;\n  public AgentSoccer.PersonRole personRole { get; set; }  *//add me*\n}\n```", "```py\npublic void RewardOrPunishPlayer(PlayerState ps, float striker, float goalie)\n{\n  if (ps.agentScript.agentRole == AgentSoccer.AgentRole.striker)\n  { \n    RewardOrPunishPerson(ps, striker);  *//new line*\n  }\n  if (ps.agentScript.agentRole == AgentSoccer.AgentRole.goalie)\n  { \n    RewardOrPunishPerson(ps, striker); *//new line*\n  }\n  ps.agentScript.Done(); //all agents need to be reset\n}\n```", "```py\nprivate void RewardOrPunishPerson(PlayerState ps, float reward)\n{\n  switch (ps.personRole)\n  {\n    case AgentSoccer.PersonRole.boy:\n      ps.agentScript.AddReward(reward * .95f);\n      break;\n\n    case AgentSoccer.PersonRole.girl:\n      ps.agentScript.AddReward(reward*1.25f);\n      break;\n\n    case AgentSoccer.PersonRole.police:\n      ps.agentScript.AddReward(reward);\n      break;\n\n    case AgentSoccer.PersonRole.zombie:\n      ps.agentScript.AddReward(reward * .5f);\n      break;\n  }\n}\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=soccer_peeps --train\n```", "```py\ntensorboard --logdir=summaries\n```"]