["```py\n######################################################################### \n###Chapter 1 - Introduction to Neural Networks - using R ################ \n###Simple R program to build, train and test neural Networks############# \n######################################################################### \n #Choose the libraries to use\nlibrary(\"neuralnet\")\n\n#Set working directory for the training data\nsetwd(\"C:/R\")\ngetwd()\n\n#Read the input file\nmydata=read.csv('Squares.csv',sep=\",\",header=TRUE)\nmydata\nattach(mydata)\nnames(mydata)\n\n#Train the model based on output from input\nmodel=neuralnet(formula = Output~Input, \n data = mydata, \n hidden=10, \n threshold=0.01 )\nprint(model)\n\n#Lets plot and see the layers\nplot(model)\n\n#Check the data - actual and predicted\nfinal_output=cbind (Input, Output, \n as.data.frame(model$net.result) )\ncolnames(final_output) = c(\"Input\", \"Expected Output\", \n \"Neural Net Output\" )\nprint(final_output)\n#########################################################################\n```", "```py\nlibrary(\"neuralnet\")\n```", "```py\nmydata=read.csv('Squares.csv',sep=\",\",header=TRUE)\nmydata\nattach(mydata)\nnames(mydata)\n```", "```py\nmodel=neuralnet(formula = Output~Input, \n data = mydata, \n hidden=10, \n threshold=0.01 )\n```", "```py\n print(model)\n```", "```py\n$result.matrix\n 1\nerror                          0.001094100442\nreached.threshold              0.009942937680\nsteps                      34563.000000000000\nIntercept.to.1layhid1         12.859227998180\nInput.to.1layhid1             -1.267870997079\nIntercept.to.1layhid2         11.352189417430\nInput.to.1layhid2             -2.185293148851\nIntercept.to.1layhid3          9.108325110066\nInput.to.1layhid3             -2.242001064132\nIntercept.to.1layhid4        -12.895335140784\nInput.to.1layhid4              1.334791491801\nIntercept.to.1layhid5         -2.764125889399\nInput.to.1layhid5              1.037696638808\nIntercept.to.1layhid6         -7.891447011323\nInput.to.1layhid6              1.168603081208\nIntercept.to.1layhid7         -9.305272978434\nInput.to.1layhid7              1.183154841948\nIntercept.to.1layhid8         -5.056059256828\nInput.to.1layhid8              0.939818815422\nIntercept.to.1layhid9         -0.716095585596\nInput.to.1layhid9             -0.199246231047\nIntercept.to.1layhid10        10.041789457410\nInput.to.1layhid10            -0.971900813630\nIntercept.to.Output           15.279512257145\n1layhid.1.to.Output          -10.701406269616\n1layhid.2.to.Output           -3.225793088326\n1layhid.3.to.Output           -2.935972228783\n1layhid.4.to.Output           35.957437333162\n1layhid.5.to.Output           16.897986621510\n1layhid.6.to.Output           19.159646982676\n1layhid.7.to.Output           20.437748965610\n1layhid.8.to.Output           16.049490298968\n1layhid.9.to.Output           16.328504039013\n1layhid.10.to.Output          -4.900353775268\n```", "```py\nplot(model)\n```", "```py\nfinal_output=cbind (Input, Output, \n as.data.frame(model$net.result) )\ncolnames(final_output) = c(\"Input\", \"Expected Output\", \n \"Neural Net Output\" )\nprint(final_output)\n```", "```py\n> print(final_output)\n Input Expected Output Neural Net Output\n1    0               0     -0.0108685813\n2    1               1      1.0277796553\n3    2               4      3.9699671691\n4    3               9      9.0173879001\n5    4              16     15.9950295615\n6    5              25     25.0033272826\n7    6              36     35.9947137155\n8    7              49     49.0046689369\n9    8              64     63.9972090104\n10   9              81     81.0008391011\n11  10             100     99.9997950184    \n```", "```py\n######################################################################## \n##Chapter 1 - Introduction to Neural Networks - using R ################ \n###Simple R program to build, train and test neural networks ########### \n### Classification based on 3 inputs and 1 categorical output ########## \n######################################################################## \n\n###Choose the libraries to use\nlibrary(NeuralNetTools)\nlibrary(nnet)\n\n###Set working directory for the training data\nsetwd(\"C:/R\")\ngetwd()\n\n###Read the input file\nmydata=read.csv('RestaurantTips.csv',sep=\",\",header=TRUE)\nmydata\nattach(mydata)\nnames(mydata)\n\n##Train the model based on output from input\nmodel=nnet(CustomerWillTip~Service+Ambience+Food, \n data=mydata, \n size =5, \n rang=0.1, \n decay=5e-2, \n maxit=5000)\nprint(model)\nplotnet(model)\ngarson(model)\n\n########################################################################\n```", "```py\nlibrary(NeuralNetTools)\nlibrary(nnet)\n```", "```py\n###Set working directory for the training data\nsetwd(\"C:/R\")\ngetwd()\n###Read the input file\nmydata=read.csv('RestaurantTips.csv',sep=\",\",header=TRUE)\nmydata\nattach(mydata)\nnames(mydata)\n```", "```py\n##Train the model based on output from input\nmodel=nnet(CustomerWillTip~Service+Ambience+Food, \n data=mydata, \n size =5, \n rang=0.1, \n decay=5e-2, \n maxit=5000)\nprint(model)\n```", "```py\n> model=nnet(CustomerWillTip~Service+Ambience+Food,data=mydata, size =5, rang=0.1, decay=5e-2, maxit=5000)\n# weights:  26\ninitial  value 7.571002 \niter  10 value 5.927044\niter  20 value 5.267425\niter  30 value 5.238099\niter  40 value 5.217199\niter  50 value 5.216688\nfinal  value 5.216665 \nconverged\n```", "```py\nprint(model) \n```", "```py\n> print(model)\na 3-5-1 network with 26 weights\ninputs: Service Ambience Food \noutput(s): CustomerWillTip \noptions were - decay=0.05\n```", "```py\nplotnet(model)\n```", "```py\ngarson(model)\n```"]