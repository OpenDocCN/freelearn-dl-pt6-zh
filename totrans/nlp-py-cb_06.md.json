["```py\nimport nltk\n```", "```py\ntext = \"Lalbagh Botanical Gardens is a well known botanical garden in Bengaluru, India.\"\n```", "```py\nsentences = nltk.sent_tokenize(text)\n```", "```py\nfor sentence in sentences:\n```", "```py\nwords = nltk.word_tokenize(sentence)\n```", "```py\ntags = nltk.pos_tag(words)\n```", "```py\nchunks = nltk.ne_chunk(tags)\n```", "```py\nprint(chunks)\n```", "```py\n\"Ravi is the CEO of a Company. He is very powerful public speaker also.\"\n```", "```py\n[('Ravi', 'NNP'), ('is', 'VBZ'), ('the', 'DT'), ('CEO', 'NNP'), ('of', 'IN'), ('a', 'DT'), ('Company', 'NNP'), ('.', '.')]\n[('He', 'PRP'), ('is', 'VBZ'), ('very', 'RB'), ('powerful', 'JJ'), ('public', 'JJ'), ('speaker', 'NN'), ('also', 'RB'), ('.', '.')]\n```", "```py\nNP -> <PRP>\nNP -> <DT>*<NNP>\nNP -> <JJ>*<NN>\nNP -> <NNP>+\n```", "```py\nimport nltk\n```", "```py\ntext = \"Ravi is the CEO of a Company. He is very powerful public speaker also.\"\n```", "```py\ngrammar = '\\n'.join([\n  'NP: {<DT>*<NNP>}',\n  'NP: {<JJ>*<NN>}',\n  'NP: {<NNP>+}',\n])\n```", "```py\nsentences = nltk.sent_tokenize(text)\n```", "```py\nfor sentence in sentences:\n```", "```py\nwords = nltk.word_tokenize(sentence)\n```", "```py\ntags = nltk.pos_tag(words)\n```", "```py\nchunkparser = nltk.RegexpParser(grammar)\n```", "```py\nresult = chunkparser.parse(tags)\n```", "```py\nprint(result)\n```", "```py\n\"Bill Gates announces Satya Nadella as new CEO of Microsoft\"\n```", "```py\nBill NNP B-PERSON\nGates NNP I-PERSON\nannounces NNS O\nSatya NNP B-PERSON\nNadella NNP I-PERSON\nas IN O\nnew JJ O\nCEO NNP B-ROLE\nof IN O\nMicrosoft NNP B-COMPANY\n```", "```py\nimport nltk\n```", "```py\nfrom nltk.corpus import conll2000\n```", "```py\nfrom nltk.corpus import treebank_chunk\n```", "```py\ndef mySimpleChunker():\n  grammar = 'NP: {<NNP>+}'\n  return nltk.RegexpParser(grammar)\n```", "```py\ndef test_nothing(data):\n  cp = nltk.RegexpParser(\"\")\n  print(cp.evaluate(data))\n```", "```py\ndef test_mysimplechunker(data):\n  schunker = mySimpleChunker()\n  print(schunker.evaluate(data))\n```", "```py\ndatasets = [\n  conll2000.chunked_sents('test.txt', chunk_types=['NP']),\n  treebank_chunk.chunked_sents()\n]\n```", "```py\nfor dataset in datasets:\n  test_nothing(dataset[:50])\n  test_mysimplechunker(dataset[:50])\n```", "```py\nimport nltk\n```", "```py\ndef RDParserExample(grammar, textlist):\n```", "```py\nparser = nltk.parse.RecursiveDescentParser(grammar)\n```", "```py\nfor text in textlist:\n  sentence = nltk.word_tokenize(text)\n  for tree in parser.parse(sentence):\n    print(tree)\n    tree.draw()\n```", "```py\ngrammar = nltk.CFG.fromstring(\"\"\"\nS -> NP VP\nNP -> NNP VBZ\nVP -> IN NNP | DT NN IN NNP\nNNP -> 'Tajmahal' | 'Agra' | 'Bangalore' | 'Karnataka'\nVBZ -> 'is'\nIN -> 'in' | 'of'\nDT -> 'the'\nNN -> 'capital'\n\"\"\")\n```", "```py\ntext = [\n  \"Tajmahal is in Agra\",\n  \"Bangalore is the capital of Karnataka\",\n]\n```", "```py\nRDParserExample(grammar, text)\n```", "```py\nimport nltk\n```", "```py\ndef SRParserExample(grammar, textlist):\n```", "```py\nparser = nltk.parse.ShiftReduceParser(grammar)\n```", "```py\nfor text in textlist:\n  sentence = nltk.word_tokenize(text)\n  for tree in parser.parse(sentence):\n    print(tree)\n    tree.draw()\n```", "```py\ntext = [\n  \"Tajmahal is in Agra\",\n  \"Bangalore is the capital of Karnataka\",\n]\n```", "```py\ngrammar = nltk.CFG.fromstring(\"\"\"\nS -> NP VP\nNP -> NNP VBZ\nVP -> IN NNP | DT NN IN NNP\nNNP -> 'Tajmahal' | 'Agra' | 'Bangalore' | 'Karnataka'\nVBZ -> 'is'\nIN -> 'in' | 'of'\nDT -> 'the'\nNN -> 'capital'\n\"\"\")\n```", "```py\nSRParserExample(grammar, text)\n```", "```py\nimport nltk\n```", "```py\ngrammar = nltk.grammar.DependencyGrammar.fromstring(\"\"\"\n'savings' -> 'small'\n'yield' -> 'savings'\n'gains' -> 'large'\n'yield' -> 'gains'\n\"\"\")\n```", "```py\nsentence = 'small savings yield large gains'\n```", "```py\ndp = nltk.parse.ProjectiveDependencyParser(grammar)\n```", "```py\nfor t in sorted(dp.parse(sentence.split())):\n  print(t)\n  t.draw()\n```", "```py\nfrom nltk.grammar import CFG\n```", "```py\nfrom nltk.parse.chart import ChartParser, BU_LC_STRATEGY\n```", "```py\ngrammar = CFG.fromstring(\"\"\"\nS -> T1 T4\nT1 -> NNP VBZ\nT2 -> DT NN\nT3 -> IN NNP\nT4 -> T3 | T2 T3\nNNP -> 'Tajmahal' | 'Agra' | 'Bangalore' | 'Karnataka'\nVBZ -> 'is'\nIN -> 'in' | 'of'\nDT -> 'the'\nNN -> 'capital'\n\"\"\")\n```", "```py\ncp = ChartParser(grammar, BU_LC_STRATEGY, trace=True)\n```", "```py\nsentence = \"Bangalore is the capital of Karnataka\"\n```", "```py\ntokens = sentence.split()\n```", "```py\nchart = cp.chart_parse(tokens)\n```", "```py\nparses = list(chart.parses(grammar.start()))\n```", "```py\nprint(\"Total Edges :\", len(chart.edges()))\n```", "```py\nfor tree in parses: print(tree)\n```", "```py\ntree.draw()\n```"]