["```py\nconda create -n ai-projects python=3.6 anaconda\n```", "```py\npip install tensorflow\n```", "```py\npip install keras\n```", "```py\nimport numpy\nimport pandas as pd\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras import optimizers\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n```", "```py\ndataframe = pd.read_csv(\"housing.csv\", sep=',', header=0)\ndataset = dataframe.values\n```", "```py\ndataframe.head()\n```", "```py\nfeatures = dataset[:,0:7]\ntarget = dataset[:,7]\n```", "```py\n# fix random seed for reproducibility \nseed = 9 \nnumpy.random.seed(seed)\n```", "```py\ndef simple_shallow_seq_net():\n   # create a sequential ANN \n    model = Sequential() \n    model.add(Dense(7, input_dim=7, kernel_initializer='normal', activation='sigmoid')) \n    model.add(Dense(1, kernel_initializer='normal')) \n    sgd = optimizers.SGD(lr=0.01) \n    model.compile(loss='mean_squared_error', optimizer=sgd) \n    return model\n```", "```py\nmodel = Sequential()\n```", "```py\nmodel.add(Dense(7, input_dim=7, kernel_initializer='normal', activation='sigmoid'))\n```", "```py\nmodel.add(Dense(1, kernel_initializer='normal'))\n```", "```py\nsgd = optimizers.SGD(lr=0.01)\n```", "```py\nmodel.compile(loss='mean_squared_error', optimizer=sgd)\n```", "```py\nreturn model\n```", "```py\nseed = 9 \nkfold = KFold(n_splits=10, random_state=seed)\n```", "```py\nestimator = KerasRegressor(build_fn=simple_shallow_seq_netl, epochs=100, batch_size=50, verbose=0)\n```", "```py\nresults = cross_val_score(estimator, features, target, cv=kfold) \nprint(\"simple_shallow_seq_model:(%.2f) MSE\" % (results.std()))\n```", "```py\nsimple_shallow_seq_net:(163.41) MSE\n```", "```py\nestimator.fit(features, target)\nestimator.model.save('simple_shallow_seq_net.h5')\n```", "```py\nestimators = [] \nestimators.append(('standardize', StandardScaler())) \nestimators.append(('estimator', KerasRegressor(build_fn=simple_shallow_seq_net, epochs=100, batch_size=50, verbose=0))) \npipeline = Pipeline(estimators)\n```", "```py\nresults = cross_val_score(pipeline, features, target, cv=kfold) \nprint(\"simple_std_shallow_seq_net:(%.2f) MSE\" % (results.std()))\n```", "```py\nsimple_std_shallow_seq_net:(65.55) MSE\n```", "```py\npipeline.fit(features, target) \npipeline.named_steps['estimator'].model.save('standardised_shallow_seq_net.h5')\n```", "```py\ndef deep_seq_net(): \n    # create a deep sequential model \n    model = Sequential() \n    model.add(Dense(7, input_dim=7, kernel_initializer='normal', activation='sigmoid')) \n    model.add(Dense(7,activation='tanh')) \n    model.add(Dense(7,activation='sigmoid')) \n    model.add(Dense(7,activation='tanh')) \n    model.add(Dense(1, kernel_initializer='normal')) \n    sgd = optimizers.SGD(lr=0.01) \n    model.compile(loss='mean_squared_error', optimizer=sgd) \n    return model\n```", "```py\nestimators = [] \nestimators.append(('standardize', StandardScaler())) estimators.append(('estimator', KerasRegressor(build_fn=deep_seq_net, epochs=100, batch_size=50, verbose=0))) \npipeline = Pipeline(estimators)\n```", "```py\nresults = cross_val_score(pipeline, features, target, cv=kfold) \nprint(\"simple_std_shallow_seq_net:(%.2f) MSE\" % (results.std()))\n```", "```py\ndeep_seq_net:(58.79) MSE\n```", "```py\npipeline.fit(features, target) \npipeline.named_steps['estimator'].model.save('deep_seq_net.h5')\n```", "```py\ndef deep_and_wide_net(): \n    # create a sequential model \n    model = Sequential() \n    model.add(Dense(21, input_dim=7, kernel_initializer='normal', activation='relu')) \n    model.add(Dense(21,activation='relu')) \n    model.add(Dense(21,activation='relu')) \n    model.add(Dense(21,activation='sigmoid')) \n    model.add(Dense(1, kernel_initializer='normal')) \n    sgd = optimizers.SGD(lr=0.01) \n    model.compile(loss='mean_squared_error', optimizer=sgd) \n    return model\n```", "```py\nestimators = [] \nestimators.append(('standardize', StandardScaler())) \nestimators.append(('estimator', KerasRegressor(build_fn=deep_and_wide_net, epochs=100, batch_size=50, verbose=0))) \npipeline = Pipeline(estimators)\n```", "```py\nresults = cross_val_score(pipeline, features, target, cv=kfold) \nprint(\"deep_and_wide_model:(%.2f) MSE\" % (results.std()))\n```", "```py\ndeep_and_wide_net:(34.43) MSE\n```", "```py\npipeline.fit(features, target) \npipeline.named_steps['estimator'].model.save('deep_and_wide_net.h5')\n```", "```py\npip install Flask\n```", "```py\nfrom flask import Flask, request \napp = Flask(__name__)\n```", "```py\n@app.route('/') \ndef hello_world(): \n return 'This is the Index page'\n```", "```py\n@app.route('/add', methods=['POST']) \ndef add(): \n    req_data = request.get_json() \n    number_1 = req_data['number_1'] \n    number_2 = req_data['number_2'] \n    return str(int(number_1)+int(number_2))\n```", "```py\nset FLASK_APP=simple_api\n```", "```py\nexport FLASK_APP=simple_api\n```", "```py\nflask run\n```", "```py\ncurl -i -X POST -H \"Content-Type: application/json\" -d \"{\\\"number_1\\\":\\\"1\\\",\\\"number_2\\\":\\\"2\\\"}\" http://127.0.0.1:5000/add\n```", "```py\nfrom flask import Flask, request \nfrom keras.models import load_model\nfrom keras import backend as K\n\nimport numpy \napp = Flask(__name__)\n```", "```py\n@app.route('/') \ndef hello_world(): \n    return 'Index page'\n```", "```py\n@app.route('/predict', methods=['POST']) \ndef add(): \n    req_data = request.get_json() \n     bizprop = req_data['bizprop'] \n    rooms = req_data['rooms'] \n    age = req_data['age'] \n    highways = req_data['highways'] \n    tax = req_data['tax'] \n    ptratio = req_data['ptratio'] \n    lstat = req_data['lstat'] \n    # This is where we load the actual saved model into new variable. \n    deep_and_wide_net = load_model('deep_and_wide_net.h5') \n    # Now we can use this to predict on new data \n    value = deep_and_wide_net.predict_on_batch(numpy.array([[bizprop, rooms, age  ,  highways   , tax   ,  ptratio  ,   lstat]], dtype=float)) \n    K.clear_session()\n\n    return str(value)\n```", "```py\nset FLASK_APP=predict_api\n```", "```py\nexport FLASK_APP= predict_api\n```", "```py\nflask run\n```", "```py\ncurl -i -X POST -H \"Content-Type: application/json\" -d \"{\\\"bizprop\\\":\\\"1\\\",\\\"rooms\\\":\\\"2\\\",\\\"age\\\":\\\"1\\\",\\\"highways\\\":\\\"1\\\",\\\"tax\\\":\\\"1\\\",\\\"ptratio\\\":\\\"1\\\",\\\"lstat\\\":\\\"1\\\"}\" http://127.0.0.1:5000/predict\n```", "```py\n*<?*xml version=\"1.0\" encoding=\"utf-8\"*?>* <ScrollView \n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:fillViewport=\"true\">   \n     <RelativeLayout\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         > \n         <TextView\n             android:id=\"@+id/bizprop\"/>\n         <EditText\n             android:id=\"@+id/bizprop-edit\"/>\n         <TextView\n             android:id=\"@+id/rooms\"/>\n         <EditText\n             android:id=\"@+id/rooms-edit\"/>\n         <TextView\n             android:id=\"@+id/age\"/>\n         <EditText\n             android:id=\"@+id/age-edit\"/>\n         <TextView\n             android:id=\"@+id/highways\"/>\n         <EditText\n             android:id=\"@+id/highways-edit\"/>\n         <TextView\n             android:id=\"@+id/tax\"/>\n         <EditText\n             android:id=\"@+id/tax-edit\"/>\n         <TextView\n             android:id=\"@+id/ptratio\"/>\n         <EditText\n             android:id=\"@+id/ptratio-edit\"/>\n         <TextView\n             android:id=\"@+id/lstat\"/>\n         <EditText\n             android:id=\"@+id/lstat-edit\"/>\n         <Button\n             android:id=\"@+id/button\"/>\n         <TextView\n             android:id=\"@+id/value\"/>\n     </RelativeLayout>\n </ScrollView>\n```", "```py\n private EditText bizprop, rooms, age, highways, tax, ptratio, lstat;\n private Button estimate;\n private TextView value;\n```", "```py\n bizprop = (EditText) findViewById(R.id.*bizprop_edit*);\n rooms = (EditText) findViewById(R.id.*rooms_edit*);\n age = (EditText) findViewById(R.id.*age_edit*);\n highways = (EditText) findViewById(R.id.*highways_edit*);\n tax = (EditText) findViewById(R.id.*tax_edit*);\n ptratio = (EditText) findViewById(R.id.*ptratio_edit*);\n lstat = (EditText) findViewById(R.id.*lstat_edit*);\n value =  (TextView) findViewById(R.id.*value*);\n estimate = (Button) findViewById(R.id.*button*);\n```", "```py\npublic JSONObject makeJSON() {\n\n     JSONObject jObj = new JSONObject();\n     try {\n\n         jObj.put(\"bizprop\", bizprop.getText().toString());\n         jObj.put(\"rooms\",  rooms.getText().toString());\n         jObj.put(\"age\",  age.getText().toString());\n         jObj.put(\"tax\",  tax.getText().toString() );\n         jObj.put(\"highways\",  highways.getText().toString());\n         jObj.put(\"ptratio\",  ptratio.getText().toString());\n         jObj.put(\"lstat\", lstat.getText().toString());\n\n     } catch (Exception e) {\n         System.*out*.println(\"Error:\" + e);\n     }\n\n     Log.*i*(\"\", jObj.toString());\n\n     return jObj;\n }\n```", "```py\nInputStream ByPostMethod(String ServerURL) {\n\n     InputStream DataInputStream = null;\n     try {\n         URL url = new URL(ServerURL);\n\n         HttpURLConnection connection = (HttpURLConnection)\n         url.openConnection();\n         connection.setDoOutput(true);\n         connection.setDoInput(true);\n         connection.setInstanceFollowRedirects(false);\n         connection.setRequestMethod(\"POST\");\n         connection.setRequestProperty(\"Content-Type\", \"application/json\");\n         connection.setRequestProperty(\"charset\", \"utf-8\");\n         connection.setUseCaches (false);\n         DataOutputStream dos = new DataOutputStream(connection.getOutputStream());\n         dos.writeBytes(makeJSON().toString());\n         *//flushes data output stream.* dos.flush();\n         dos.close();\n         *//Getting HTTP response code* int response = connection.getResponseCode();\n         *//if response code is 200 / OK then read Inputstream\n         //HttpURLConnection.HTTP_OK is equal to 200* if(response == HttpURLConnection.*HTTP_OK*) {\n             DataInputStream = connection.getInputStream();\n         }\n\n     } catch (Exception e) {\n         Log.*e*(\"ERROR CAUGHT\", \"Error in GetData\", e);\n     }\n     return DataInputStream;\n\n }\n```", "```py\nString ConvertStreamToString(InputStream stream) {\n\n     InputStreamReader isr = new InputStreamReader(stream);\n     BufferedReader reader = new BufferedReader(isr);\n     StringBuilder response = new StringBuilder();\n\n     String line = null;\n     try {\n\n         while ((line = reader.readLine()) != null) {\n             response.append(line);\n         }\n\n     } catch (IOException e) {\n         Log.*e*(\"ERROR CAUGHT\", \"Error in ConvertStreamToString\", e);\n     } catch (Exception e) {\n         Log.*e*(\"ERROR CAUGHT\", \"Error in ConvertStreamToString\", e);\n     } finally {\n\n         try {\n             stream.close();\n\n         } catch (IOException e) {\n             Log.*e*(\"ERROR CAUGHT\", \"Error in ConvertStreamToString\", e);\n\n         } catch (Exception e) {\n             Log.*e*(\"ERROR CAUGHT\", \"Error in ConvertStreamToString\", e);\n         }\n     }\n     return response.toString();\n }\n```", "```py\npublic void DisplayMessage(String a) \n{\n\n     value.setText(a);\n }\n```", "```py\nprivate class MakeNetworkCall extends AsyncTask<String, Void, String> {\n\n     @Override\n     protected void onPreExecute() {\n         super.onPreExecute();\n         DisplayMessage(\"Please Wait ...\");\n     }\n\n     @Override\n     protected String doInBackground(String... arg) {\n\n         InputStream is = null;\n         String URL = \"http://10.0.2.2:5000/predict\";\n         Log.*d*(\"ERROR CAUGHT\", \"URL: \" + URL);\n         String res = \"\";\n\n         is = ByPostMethod(URL);\n\n         if (is != null) {\n             res = ConvertStreamToString(is);\n         } else {\n             res = \"Something went wrong\";\n         }\n         return res;\n     }\n\n     protected void onPostExecute(String result) {\n         super.onPostExecute(result);\n\n         DisplayMessage(result);\n         Log.*d*(\"COMPLETED\", \"Result: \" + result);\n     }\n }\n```", "```py\nestimate.setOnClickListener(new View.OnClickListener() {\n     @Override\n     public void onClick(View v) {\n         Log.*i*(\"CHECK\", \"CLICKED\");\n\n         new MakeNetworkCall().execute(\"http://10.0.2.2:5000/predict\", \"Post\");\n     }\n });\n```", "```py\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n```", "```py\nset FLASK_APP=predict_api\n\nflask run\n```", "```py\n@interface ViewController ()<UITextFieldDelegate>\n{\n UITextField* bizropfeild,*roomsfeild,*agefeild,*highwaysfeild,*taxfeild,*ptratiofeild,*lstatfeild;\n}\n@end\n```", "```py\nUILabel *headerLabel = [[UILabel alloc]initWithFrame:CGRectMake(10, 20, self.view.frame.size.width-20, 25)];\n headerLabel.font = [UIFont fontWithName:@\"SnellRoundhand-Black\" size:20]; //custom font\n headerLabel.backgroundColor = [UIColor clearColor];\n headerLabel.textColor = [UIColor blackColor];\n headerLabel.textAlignment = NSTextAlignmentCenter;\n headerLabel.text=@\"Estimate the value of real estate\";\n [self.view addSubview:headerLabel];\n\n UIView *sepratorLine =[[UIView alloc]initWithFrame:CGRectMake(0, 50, self.view.frame.size.width, 5)];\n sepratorLine.backgroundColor=[UIColor blackColor];\n [self.view addSubview:sepratorLine];\n```", "```py\nUILabel *detailLabel = [[UILabel alloc]initWithFrame:CGRectMake(10, 55, self.view.frame.size.width-20, 25)];\n detailLabel.font = [UIFont fontWithName:@\"SnellRoundhand-Black\" size:18]; //custom font\n detailLabel.backgroundColor = [UIColor clearColor];\n detailLabel.textColor = [UIColor blackColor];\n detailLabel.textAlignment = NSTextAlignmentLeft;\n detailLabel.text=@\"Enter real estate details\";\n [self.view addSubview:detailLabel];\n```", "```py\n UILabel *bizropLabel = [[UILabel alloc]initWithFrame:CGRectMake(5, 85, self.view.frame.size.width-150, 35)];\n bizropLabel.font = [UIFont fontWithName:@\"TimesNewRomanPSMT\" size:12]; //custom font\n bizropLabel.backgroundColor = [UIColor clearColor];\n bizropLabel.numberOfLines=2;\n bizropLabel.textColor = [UIColor blackColor];\n bizropLabel.textAlignment = NSTextAlignmentLeft;\n bizropLabel.text=@\"Bizrope, The proportion of non-retail business acres per town\";\n [self.view addSubview:bizropLabel];\n\n bizropfeild = [[UITextField alloc] initWithFrame:CGRectMake(self.view.frame.size.width-140, 85, 130, 35)];\n bizropfeild.delegate=self;\n bizropfeild.layer.borderColor=[UIColor blackColor].CGColor;\n bizropfeild.layer.borderWidth=1.0;\n [self.view addSubview:bizropfeild];\n\n```", "```py\nUILabel *roomsLabel = [[UILabel alloc]initWithFrame:CGRectMake(5, 125, self.view.frame.size.width-150, 35)];\n roomsLabel.font = [UIFont fontWithName:@\"TimesNewRomanPSMT\" size:12]; //custom font\n roomsLabel.backgroundColor = [UIColor clearColor];\n roomsLabel.numberOfLines=2;\n roomsLabel.textColor = [UIColor blackColor];\n roomsLabel.textAlignment = NSTextAlignmentLeft;\n roomsLabel.text=@\"ROOMS, the average number of rooms per dwelling\";\n [self.view addSubview:roomsLabel];\n\n roomsfeild = [[UITextField alloc] initWithFrame:CGRectMake(self.view.frame.size.width-140, 125, 130, 35)];\n roomsfeild.delegate=self;\n roomsfeild.layer.borderColor=[UIColor blackColor].CGColor;\n roomsfeild.layer.borderWidth=1.0;\n [self.view addSubview:roomsfeild];\n```", "```py\nUIButton *estimateButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n [estimateButton addTarget:self action:@selector(estimateAction)\n forControlEvents:UIControlEventTouchUpInside];\n estimateButton.layer.borderColor=[UIColor blackColor].CGColor;\n estimateButton.layer.borderWidth=1.0;\n [estimateButton setTitle:@\"Estimate\" forState:UIControlStateNormal];\n [estimateButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n estimateButton.frame = CGRectMake(self.view.frame.size.width/2-80, 375, 160.0, 40.0);\n [self.view addSubview:estimateButton];\n```", "```py\nNSString *userUpdate =[NSString stringWithFormat:@\"bizprop=%@&rooms=%@&age=%@&highways=%@&tax=%@&ptratio=%@&lstat=%@\",bizropfeild.text,roomsfeild.text,agefeild.text,highwaysfeild.text,taxfeild.text,ptratiofeild.text,lstatfeild.text];\n```", "```py\n//create the Method \"GET\" or \"POST\"\n [urlRequest setHTTPMethod:@\"POST\"];\n //Convert the String to Data\n NSData *data1 = [userUpdate dataUsingEncoding:NSUTF8StringEncoding];\n //Apply the data to the body\n [urlRequest setHTTPBody:data1];\n NSURLSession *session = [NSURLSession sharedSession];\n NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:urlRequest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) { }\n```", "```py\nNSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;\n if(httpResponse.statusCode == 200)\n {\n NSError *parseError = nil;\n NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n NSLog(@\"The response is - %@\",responseDictionary);\nUILabel *outputLabel = [[UILabel alloc]initWithFrame:CGRectMake(5, 325, self.view.frame.size.width-150, 35)];\n outputLabel.font = [UIFont fontWithName:@\"TimesNewRomanPSMT\" size:12]; //custom font\n outputLabel.backgroundColor = [UIColor clearColor];\n outputLabel.numberOfLines=2;\n outputLabel.textColor = [UIColor blackColor];\n outputLabel.textAlignment = NSTextAlignmentLeft;\n outputLabel.text = [responseDictionary valueForKey:@\"\"];\n [self.view addSubview:outputLabel];\n }\n```"]