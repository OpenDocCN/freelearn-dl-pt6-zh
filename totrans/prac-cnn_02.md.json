["```py\n#import all required lib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nfrom skimage.io import imread\nfrom skimage.transform import resize\n# Load a color image in grayscale\nimage = imread('sample_digit.png',as_grey=True)\nimage = resize(image,(28,28),mode='reflect')\nprint('This image is: ',type(image), \n         'with dimensions:', image.shape)\n\nplt.imshow(image,cmap='gray')\n\n```", "```py\ndef visualize_input(img, ax):\n\n    ax.imshow(img, cmap='gray')\n    width, height = img.shape\n    thresh = img.max()/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(image, ax)\n```", "```py\nfrom keras.layers import Conv2D\n```", "```py\nConv2D(filters, kernel_size, strides, padding, activation='relu', input_shape)\n```", "```py\nConv2D(filters=16, kernel_size=2, strides=2, activation='relu', input_shape=(200, 200, 1))\n```", "```py\nConv2D(filters=32, kernel_size=3, padding='same', activation='relu')\n```", "```py\nConv2D(64, (2,2), activation='relu')\n```", "```py\nimport keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig = plt.figure(figsize=(20,5))\nfor i in range(36):\n    ax = fig.add_subplot(3, 12, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(x_train[i]))from keras.datasets import cifar10\n```", "```py\n# rescale [0,255] --> [0,1]\nx_train = x_train.astype('float32')/255\nfrom keras.utils import np_utils\n\n# one-hot encode the labels\nnum_classes = len(np.unique(y_train))\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n\n# break training set into training and validation sets\n(x_train, x_valid) = x_train[5000:], x_train[:5000]\n(y_train, y_valid) = y_train[5000:], y_train[:5000]\n\n# print shape of training set\nprint('x_train shape:', x_train.shape)\n\n# printing number of training, validation, and test images\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\nprint(x_valid.shape[0], 'validation samples')x_test = x_test.astype('float32')/255\n\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', \n                        input_shape=(32, 32, 3)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', \n                  metrics=['accuracy'])\nfrom keras.callbacks import ModelCheckpoint \n\n# train the model\ncheckpointer = ModelCheckpoint(filepath='model.weights.best.hdf5', verbose=1, \n                               save_best_only=True)\nhist = model.fit(x_train, y_train, batch_size=32, epochs=100,\n          validation_data=(x_valid, y_valid), callbacks=[checkpointer], \n          verbose=2, shuffle=True)\n```", "```py\nimagedatagen = ImageDataGenerator()\n```", "```py\nimagedatagen.fit(train_data)\n```", "```py\nimagedatagen.flow(x_train, y_train, batch_size=32)\n```", "```py\nfit_generator(imagedatagen, samples_per_epoch=len(X_train), epochs=200)\n```", "```py\n#Plot images \nfrom keras.datasets import mnist\nfrom matplotlib import pyplot\n#loading data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n#creating a grid of 3x3 images\nfor i in range(0, 9):\n  pyplot.subplot(330 + 1 + i)\n  pyplot.imshow(X_train[i], cmap=pyplot.get_cmap('gray'))\n#Displaying the plot\npyplot.show()\n```", "```py\nfrom keras.preprocessing.image import ImageDataGenerator\n# creating and configuring augmented image generator\ndatagen_train = ImageDataGenerator(\n width_shift_range=0.1, # shifting randomly images horizontally (10% of total width)\n height_shift_range=0.1, # shifting randomly images vertically (10% of total height)\n horizontal_flip=True) # flipping randomly images horizontally\n# creating and configuring augmented image generator\ndatagen_valid = ImageDataGenerator(\n width_shift_range=0.1, # shifting randomly images horizontally (10% of total width)\n height_shift_range=0.1, # shifting randomly images vertically (10% of total height)\n horizontal_flip=True) # flipping randomly images horizontally\n# fitting augmented image generator on data\ndatagen_train.fit(x_train)\ndatagen_valid.fit(x_valid)\n\n```"]