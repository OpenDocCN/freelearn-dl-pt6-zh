["```py\nfrom keras.layers import Conv2D\n```", "```py\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), padding='same', strides=(2,2), input_shape=input_shape))\n```", "```py\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n```", "```py\n    from google.colab import drive\n    drive.mount('/content/drive')\n    ```", "```py\n    cd /content/drive/My Drive/C13550/Lesson05/\n    ```", "```py\n    from keras.datasets import fashion_mnist \n    (x_train, y_train), (x_test, y_test) =fashion_mnist.load_data()\n    import random\n    random.seed(42) \n    ```", "```py\n    import numpy as np\n    from keras import utils as np_utils\n    x_train = (x_train.astype(np.float32))/255.0 \n    x_test = (x_test.astype(np.float32))/255.0 \n    x_train = x_train.reshape(x_train.shape[0], 28, 28, 1) \n    x_test = x_test.reshape(x_test.shape[0], 28, 28, 1) \n    y_train = np_utils.to_categorical(y_train, 10) \n    y_test = np_utils.to_categorical(y_test, 10) \n    input_shape = x_train.shape[1:]\n    ```", "```py\n    from keras.models import Sequential\n    from keras.callbacks import EarlyStopping, ModelCheckpoint\n    from keras.layers import Input, Dense, Dropout, Flatten\n    from keras.layers import Conv2D, Activation, BatchNormalization\n    ```", "```py\n    def CNN(input_shape):\n        model = Sequential()\n        model.add(Conv2D(32, kernel_size=(3, 3), padding='same', strides=(2,2), input_shape=input_shape))\n    ```", "```py\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n    ```", "```py\n        model.add(Conv2D(32, kernel_size=(3, 3), padding='same', strides=(2,2)))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n    ```", "```py\n        model.add(Dropout(0.2))\n    ```", "```py\n        model.add(Conv2D(64, kernel_size=(3, 3), padding='same', strides=(2,2)))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Conv2D(64, kernel_size=(3, 3), padding='same', strides=(2,2)))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Dropout(0.2))\n    ```", "```py\n        model.add(Flatten())\n        model.add(Dense(512))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Dropout(0.5))\n    ```", "```py\n        model.add(Dense(10, activation=\"softmax\"))\n        return model\n    ```", "```py\n    model = CNN(input_shape)\n\n    model.compile(loss='categorical_crossentropy', optimizer='Adadelta', metrics=['accuracy'])\n\n    ckpt = ModelCheckpoint('Models/model.h5', save_best_only=True,monitor='val_loss', mode='min', save_weights_only=False) \n    earlyStopping = EarlyStopping(monitor='val_loss', patience=5, verbose=0,mode='min')\n    ```", "```py\n    model.fit(x_train, y_train, batch_size=128, epochs=100, verbose=1, validation_data=(x_test, y_test), callbacks=[ckpt,earlyStopping]) \n    ```", "```py\n    import cv2 \n\n    images = ['ankle-boot.jpg', 'bag.jpg', 'trousers.jpg', 't-shirt.jpg'] \n\n    for number in range(len(images)):\n        imgLoaded = cv2.imread('Dataset/testing/%s'%(images[number]),0) \n        img = cv2.resize(imgLoaded, (28, 28)) \n        img = np.invert(img) \n        img = (img.astype(np.float32))/255.0 \n        img = img.reshape(1, 28, 28, 1) \n\n        plt.subplot(1,5,number+1),plt.imshow(imgLoaded,'gray') \n        plt.title(np.argmax(model.predict(img)[0])) \n        plt.xticks([]),plt.yticks([]) \n    plt.show()\n    ```", "```py\nfrom keras.preprocessing.image import ImageDataGenerator\n```", "```py\ndatagen = ImageDataGenerator(\n        rotation_range=20,\n        zoom_range = 0.2,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        horizontal_flip=True\n        )\n```", "```py\ndatagen.fit(x_train)\n```", "```py\nmodel.fit_generator(datagen.flow(x_train, y_train,\n                                 batch_size=batch_size),\n                    epochs=epochs,\n                    validation_data=(x_test, y_test),\n                    callbacks=callbacks,\n                    steps_per_epoch=len(x_train) // batch_size)\n```", "```py\n    from google.colab import drive\n    drive.mount('/content/drive')\n    ```", "```py\n    cd /content/drive/My Drive/C13550/Lesson5/Dataset\n    ```", "```py\n    import re, os, cv2\n    import numpy as np\n    rows,cols = 128,128\n    //{…}##the detailed code can be found on Github##\n    def list_files(directory, ext=None):\n    //{…}##the detailed code can be found on Github##\n    def load_images(path,label):\n    //{…}\n        for fname in list_files( path, ext='jpg' ): \n            img = cv2.imread(fname)\n            img = cv2.resize(img, (rows, cols))\n    //{…}##the detailed code can be found on Github##\n    ```", "```py\n    X, y = load_images('Dataset/dogs-cats/dogs',0)\n    X_aux, y_aux = load_images('Dataset/dogs-cats/cats',1)\n    X = np.concatenate((X, X_aux), axis=0)\n    y = np.concatenate((y, y_aux), axis=0)\n    print(X.shape)\n    print(y.shape)\n    ```", "```py\n    import random \n    random.seed(42) \n    from matplotlib import pyplot as plt\n\n    for idx in range(5): \n        rnd_index = random.randint(0, X.shape[0]-1)\n        plt.subplot(1,5,idx+1)\n        plt.imshow(cv2.cvtColor(X[rnd_index],cv2.COLOR_BGR2RGB)) \n        plt.xticks([]),plt.yticks([])\n    plt.show() \n    ```", "```py\n    from keras import utils as np_utils\n    X = (X.astype(np.float32))/255.0\n    X = X.reshape(X.shape[0], rows, cols, 3) \n    y = np_utils.to_categorical(y, 2)\n    input_shape = X.shape[1:]\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    print(x_train.shape)\n    print(y_train.shape)\n    print(x_test.shape)\n    print(y_test.shape)\n    ```", "```py\n    from keras.models import Sequential\n    from keras.callbacks import EarlyStopping, ModelCheckpoint\n    from keras.layers import Input, Dense, Dropout, Flatten\n    from keras.layers import Conv2D, Activation, BatchNormalization\n    ```", "```py\n    def CNN(input_shape):\n        model = Sequential()\n\n        model.add(Conv2D(16, kernel_size=(5, 5), padding='same', strides=(2,2), input_shape=input_shape))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Conv2D(16, kernel_size=(3, 3), padding='same', strides=(2,2)))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Dropout(0.2))\n    //{…}##the detailed code can be found on Github##\n\n        model.add(Conv2D(128, kernel_size=(2, 2), padding='same', strides=(2,2)))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Dropout(0.2))\n\n        model.add(Flatten())\n        model.add(Dense(512))\n        model.add(Activation('relu'))\n        model.add(BatchNormalization())\n        model.add(Dropout(0.5))\n\n        model.add(Dense(2, activation=\"softmax\"))\n\n        return model\n    ```", "```py\n    model = CNN(input_shape)\n    model.compile(loss='categorical_crossentropy', optimizer='Adadelta', metrics=['accuracy'])\n    ckpt = ModelCheckpoint('Models/model_dogs-cats.h5', save_best_only=True,monitor='val_loss', mode='min', save_weights_only=False) \n    earlyStopping = EarlyStopping(monitor='val_loss', patience=15, verbose=0,mode='min')\n    ```", "```py\n    model.fit(x_train, y_train,\n              batch_size=8,\n              epochs=100,\n              verbose=1, \n              validation_data=(x_test, y_test),\n              callbacks=[ckpt,earlyStopping]) \n    ```", "```py\n    from sklearn import metrics\n    model.load_weights('Models/model_dogs-cats.h5')\n    y_pred = model.predict(x_test, batch_size=8, verbose=0)\n    y_pred = np.argmax(y_pred, axis=1)\n    y_test_aux = y_test.copy()\n    y_test_pred = list()\n    for i in y_test_aux:\n        y_test_pred.append(np.argmax(i))\n\n    print (y_pred)\n\n    # Evaluate the prediction\n    accuracy = metrics.accuracy_score(y_test_pred, y_pred)\n    precision, recall, f1, support = metrics.precision_recall_fscore_support(y_test_pred, y_pred, average=None)\n    print('\\nFinal results...')\n    print(metrics.classification_report(y_test_pred, y_pred))\n    print('Acc      : %.4f' % accuracy)\n    print('Precision: %.4f' % np.average(precision))\n    print('Recall   : %.4f' % np.average(recall))\n    print('F1       : %.4f' % np.average(f1))\n    print('Support  :', np.sum(support))\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    datagen = ImageDataGenerator(\n            rotation_range=15,\n            width_shift_range=0.2,\n            height_shift_range=0.2,\n            horizontal_flip=True,\n            zoom_range=0.3\n            )\n    ```", "```py\n    datagen.fit(x_train)\n\n    model = CNN(input_shape)\n\n    model.compile(loss='categorical_crossentropy', optimizer='Adadelta', metrics=['accuracy'])\n    ckpt = ModelCheckpoint('Models/model_dogs-cats.h5', save_best_only=True,monitor='val_loss', mode='min', save_weights_only=False)\n    ```", "```py\n    model.fit_generator(\n              datagen.flow(x_train, y_train, batch_size=8),\n              epochs=100,\n              verbose=1, \n              validation_data=(x_test, y_test),\n              callbacks=[ckpt,earlyStopping],\n              steps_per_epoch=len(x_train) // 8,\n              workers=4) \n    ```", "```py\n    from sklearn import metrics\n    # Make a prediction\n    print (\"Making predictions...\")\n    model.load_weights('Models/model_dogs-cats.h5')\n    #y_pred = model.predict(x_test)\n    y_pred = model.predict(x_test, batch_size=8, verbose=0)\n    y_pred = np.argmax(y_pred, axis=1)\n    y_test_aux = y_test.copy()\n    y_test_pred = list()\n    for i in y_test_aux:\n        y_test_pred.append(np.argmax(i))\n    print (y_pred)\n    # Evaluate the prediction\n    accuracy = metrics.accuracy_score(y_test_pred, y_pred)\n    precision, recall, f1, support = metrics.precision_recall_fscore_support(y_test_pred, y_pred, average=None)\n    print('\\nFinal results...')\n    print(metrics.classification_report(y_test_pred, y_pred))\n    print('Acc      : %.4f' % accuracy)\n    print('Precision: %.4f' % np.average(precision))\n    print('Recall   : %.4f' % np.average(recall))\n    print('F1       : %.4f' % np.average(f1))\n    print('Support  :', np.sum(support))\n    ```", "```py\n    from keras.models import load_model\n    model = load_model('Models/model_dogs-cats.h5')\n    ```", "```py\n    images = ['dog1.jpg', 'dog2.jpg', 'cat1.jpg', 'cat2.jpg'] \n\n    for number in range(len(images)):\n        imgLoaded = cv2.imread('testing/%s'%(images[number])) \n        img = cv2.resize(imgLoaded, (rows, cols)) \n        img = (img.astype(np.float32))/255.0 \n        img = img.reshape(1, rows, cols, 3) \n\n    ```", "```py\n      plt.subplot(1,5,number+1),plt.imshow(cv2.cvtColor(imgLoad ed,cv2.COLOR_BGR2RGB))\n        plt.title(np.argmax(model.predict(img)[0])) \n        plt.xticks([]),plt.yticks([]) \n    fig = plt.gcf()\n    plt.show()\n    ```", "```py\n    import numpy as np\n    classes = ['daisy','dandelion','rose','sunflower','tulip']\n    X = np.load(\"Dataset/flowers/%s_x.npy\"%(classes[0]))\n    y = np.load(\"Dataset/flowers/%s_y.npy\"%(classes[0]))\n    print(X.shape)\n    for flower in classes[1:]:\n        X_aux = np.load(\"Dataset/flowers/%s_x.npy\"%(flower))\n        y_aux = np.load(\"Dataset/flowers/%s_y.npy\"%(flower))\n        print(X_aux.shape)\n        X = np.concatenate((X, X_aux), axis=0)\n        y = np.concatenate((y, y_aux), axis=0)\n    print(X.shape)\n    print(y.shape)\n    ```", "```py\n    from sklearn import metrics\n    y_pred = model.predict(x_test, batch_size=batch_size, verbose=0)\n    y_pred = np.argmax(y_pred, axis=1)\n    y_test_aux = y_test.copy()\n    y_test_pred = list()\n    for i in y_test_aux:\n        y_test_pred.append(np.argmax(i))\n    accuracy = metrics.accuracy_score(y_test_pred, y_pred)\n    print(accuracy)\n    ```", "```py\nfrom keras.applications import resnet50\nmodel = resnet50.ResNet50(include_top=False, weights='imagenet', input_shape=(150,150,3))\n```", "```py\nfrom keras.models import Model\nfrom keras.layers import Dense\n\nmodel.layers.pop()\nmodel.outputs = [model.layers[-1].output]\nmodel.layers[-1].outbound_nodes = []\n\nx=Dense(5, activation='softmax')(model.output)\nmodel=Model(model.input,x)\n```", "```py\nfrom keras.models import Model\nfrom keras.layers import Dense, GlobalAveragePooling2D\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(512,activation='relu')(x) #dense layer 2\nx=Dropout(0.3)(x)\nx=Dense(512,activation='relu')(x) #dense layer 3\nx=Dropout(0.3)(x)\npreds=Dense(5,activation='softmax')(x) #final layer with softmax activation\nmodel=Model(inputs=base_model.input,outputs=preds)\n```", "```py\nfrom keras.applications.resnet50 import preprocess_input\n```", "```py\n    import re, os, cv2\n    import numpy as np\n    def list_files(directory, ext=None):\n    //{…}\n    ##the detailed code can be found on Github##\n\n    def load_images(path,label):\n    //{…}\n    ##the detailed code can be found on Github##\n        for fname in list_files( path, ext='jpg' ): \n            img = cv2.imread(fname)\n            img = cv2.resize(img, (224, 224))\n    //{…}\n    ##the detailed code can be found on Github##\n    ```", "```py\n    X, y = load_images('Dataset/money/20',0)\n    X_aux, y_aux = load_images('Dataset/money/5',1)\n    X = np.concatenate((X, X_aux), axis=0)\n    y = np.concatenate((y, y_aux), axis=0)\n    print(X.shape)\n    print(y.shape)\n    ```", "```py\n    import random \n    random.seed(42) \n    from matplotlib import pyplot as plt\n\n    for idx in range(5): \n        rnd_index = random.randint(0, 59)\n        plt.subplot(1,5,idx+1),plt.imshow(cv2.cvtColor(X[rnd_index],cv2.COLOR_BGR2RGB)) \n        plt.xticks([]),plt.yticks([])\n    plt.savefig(\"money_samples.jpg\", bbox_inches='tight')\n    plt.show() \n    ```", "```py\n    from keras.applications.mobilenet import MobileNet, preprocess_input\n    from keras.layers import Input, GlobalAveragePooling2D, Dense, Dropout\n    from keras.models import Model\n\n    input_tensor = Input(shape=(224, 224, 3))\n\n    base_model = MobileNet(input_tensor=input_tensor,weights='imagenet',include_top=False)\n\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = Dense(512,activation='relu')(x)\n    x = Dropout(0.5)(x)\n    x = Dense(2, activation='softmax')(x)\n\n    model = Model(base_model.input, x)\n    ```", "```py\n    for layer in model.layers[:20]:\n        layer.trainable=False\n    for layer in model.layers[20:]:\n        layer.trainable=True\n    ```", "```py\n    import keras\n    model.compile(loss='categorical_crossentropy',optimizer=keras.optimizers.Adadelta(), metrics=['accuracy'])\n    ```", "```py\n    from keras import utils as np_utils\n    X = preprocess_input(X)\n    #X = (X.astype(np.float32))/255.0 \n    y = np_utils.to_categorical(y)\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    print(x_train.shape)\n    print(y_train.shape)\n    print(x_test.shape)\n    print(y_test.shape)\n    ```", "```py\n    from keras.preprocessing.image import ImageDataGenerator\n    train_datagen = ImageDataGenerator(  \n          rotation_range=90,     \n          width_shift_range = 0.2,\n          height_shift_range = 0.2,\n          horizontal_flip=True,    \n          vertical_flip=True,\n          zoom_range=0.4)\n    train_datagen.fit(x_train)\n    ```", "```py\n    from keras.callbacks import ModelCheckpoint\n    ckpt = ModelCheckpoint('Models/model_money.h5', save_best_only=True, monitor='val_loss', mode='min', save_weights_only=False)\n    model.fit_generator(train_datagen.flow(x_train, y_train,\n                                    batch_size=4),\n                        epochs=50,\n                        validation_data=(x_test, y_test),\n                        callbacks=[ckpt],\n                        steps_per_epoch=len(x_train) // 4,\n                        workers=4)\n    ```", "```py\n    y_pred = model.predict(x_test, batch_size=4, verbose=0)\n    y_pred = np.argmax(y_pred, axis=1)\n    y_test_aux = y_test.copy()\n    y_test_pred = list()\n    for i in y_test_aux:\n        y_test_pred.append(np.argmax(i))\n\n    accuracy = metrics.accuracy_score(y_test_pred, y_pred)\n    print('Acc: %.4f' % accuracy)\n    ```", "```py\n    images = ['20.jpg','20_1.jpg','5.jpg','5_1.jpg']\n    model.load_weights('Models/model_money.h5')\n    for number in range(len(images)):\n        imgLoaded = cv2.imread('Dataset/testing/%s'%(images[number])) \n        img = cv2.resize(imgLoaded, (224, 224)) \n        #cv2.imwrite('test.jpg',img) \n        img = (img.astype(np.float32))/255.0 \n        img = img.reshape(1, 224, 224, 3) \n        plt.subplot(1,5,number+1),plt.imshow(cv2.cvtColor(imgLoaded,cv2.COLOR_BGR2RGB)) \n        plt.title('20' if np.argmax(model.predict(img)[0]) == 0 else '5') \n        plt.xticks([]),plt.yticks([]) \n    plt.show()\n    ```"]