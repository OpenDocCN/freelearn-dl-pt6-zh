["```py\nFile savedLocation = new File(\"model.zip\");\n boolean saveUpdater = true;\n MultiLayerNetwork restored = MultiLayerNetwork.load(savedLocation, saveUpdater);\n```", "```py\n<dependency>\n <groupId>org.deeplearning4j</groupId>\n <artifactId>deeplearning4j-zoo</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\nMultiLayerNetwork newModel = new TransferLearning.Builder(oldModel)\n .fineTuneConfiguration(fineTuneConf)\n .build();\n```", "```py\nComputationGraph newModel = new TransferLearning.GraphBuilder(oldModel).\n .fineTuneConfiguration(fineTuneConf)\n .build();\n```", "```py\n TransferLearningHelper tHelper = new TransferLearningHelper(newModel);\n```", "```py\nTransferLearningHelper tHelper = new TransferLearningHelper(oldModel, \"layer1\")\n```", "```py\n  while(iterator.hasNext()) {\n         DataSet currentFeaturized = transferLearningHelper.featurize(iterator.next());\n         saveToDisk(currentFeaturized); //save the featurized date to disk \n        }\n```", "```py\nDataSetIterator existingTrainingData = new ExistingMiniBatchDataSetIterator(new File(\"trainFolder\"),\"churn-\"+featureExtractorLayer+\"-train-%d.bin\");\n DataSetIterator existingTestData = new ExistingMiniBatchDataSetIterator(new File(\"testFolder\"),\"churn-\"+featureExtractorLayer+\"-test-%d.bin\");\n```", "```py\n transferLearningHelper.fitFeaturized(existingTrainingData);\n```", "```py\n transferLearningHelper.unfrozenMLN().evaluate(existingTestData);\n```", "```py\nZooModel zooModel = VGG16.builder().build();\n ComputationGraph pretrainedNet = (ComputationGraph)    zooModel.initPretrained(PretrainedType.IMAGENET);\n```", "```py\noldModel.getLayerWiseConfigurations().toJson()\n```", "```py\nTransferLearningHelper tHelper = new TransferLearningHelper(oldModel, \"layer2\")\n```", "```py\ncurrentFeaturized.save(new File(fileFolder,fileName));\n```", "```py\ntransferLearningHelper.unfrozenMLN().evaluate(existingTestData);\n```", "```py\nZooModel zooModel =VGG16.builder().build();\n ComputationGraph network = (ComputationGraph)zooModel.initPretrained();\n```", "```py\nComputationGraph pretrained = (ComputationGraph)TinyYOLO.builder().build().initPretrained();\n```", "```py\n ComputationGraph pretrained = (ComputationGraph) Darknet19.builder().build().initPretrained();\n\n```", "```py\nFineTuneConfiguration fineTuneConf = new FineTuneConfiguration.Builder()\n .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n .updater(new Nesterovs(5e-5))\n .activation(Activation.RELU6)\n .biasInit(0.001)\n .dropOut(0.85)\n .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer)\n .l2(0.0001)\n .weightInit(WeightInit.DISTRIBUTION)\n .seed(seed)\n .build();\n```", "```py\nMultiLayerNetwork newModel = new TransferLearning.Builder(oldModel)\n.fineTuneConfiguration(fineTuneConf)\n.build();\n```", "```py\nMultiLayerNetwork newModel = new TransferLearning.Builder(oldModel)\n .setFeatureExtractor(featurizeExtractionLayer)\n .build();\n```", "```py\nnewModel.fit(numOfEpochs);\n```", "```py\n<dependency>\n   <groupId>org.deeplearning4j</groupId>\n   <artifactId>deeplearning4j-modelimport</artifactId>\n   <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\nString modelFileLocation = new ClassPathResource(\"kerasModel.h5\").getFile().getPath();\n MultiLayerNetwork model = KerasModelImport.importKerasSequentialModelAndWeights(modelFileLocation);\n```", "```py\nString modelFileLocation = new ClassPathResource(\"kerasModel.h5\").getFile().getPath();\n ComputationGraph model = KerasModelImport.importKerasModelAndWeights(modelFileLocation);\n```", "```py\nKerasModelBuilder builder = new KerasModel().modelBuilder().modelHdf5Filename(modelFile.getAbsolutePath())\n .enforceTrainingConfig(trainConfigToEnforceOrNot);\n if (inputShape != null) {\n builder.inputShape(inputShape);\n }\n KerasModel model = builder.buildModel();\n ComputationGraph newModel = model.getComputationGraph();\n```", "```py\nString modelJsonFileLocation = new ClassPathResource(\"kerasModel.json\").getFile().getPath();\n String modelWeightsFileLocation = new ClassPathResource(\"kerasModelWeights.h5\").getFile().getPath();\n MultiLayerNetwork model = KerasModelImport.importKerasSequentialModelAndWeights(modelJsonFileLocation, modelWeightsFileLocation, enforceTrainConfig);\n```", "```py\nKerasModelImport.importKerasModelAndWeights(modelJsonFileLocation,modelWeightsFileLocation,enforceTrainConfig);\n```", "```py\nString modelJsonFileLocation = new ClassPathResource(\"kerasModel.json\").getFile().getPath();\n String modelWeightsFileLocation = new ClassPathResource(\"kerasModelWeights.h5\").getFile().getPath();\n ComputationGraph model = KerasModelImport.importKerasModelAndWeights(modelJsonFileLocation,modelWeightsFileLocation,enforceTrainConfig);\n```"]