["```py\nC:\\> pip3 install --upgrade tensorflow\n```", "```py\ninstall.packages(\"tensorflow\")\n```", "```py\nlibrary(tensorflow)\ninstall_tensorflow()\n```", "```py\nsess = tf$Session()\nhello <- tf$constant('Hello, TensorFlow!')\nsess$run(hello)\n```", "```py\n> library(tensorflow)\n> sess = tf$Session()\n> hello <- tf$constant('Hello, TensorFlow!')\n> sess$run(hello)\nb'Hello, TensorFlow!'\n```", "```py\nMNIST dataset.\n```", "```py\ninstall.packages(\"devtools\")\ndevtools::install_github(\"rstudio/keras\")\n```", "```py\nlibrary(keras)\n```", "```py\n> data=dataset_mnist()\n```", "```py\n#################################################################\n### Chapter 7 - Neural Networks with R - Use cases      #########\n### Handwritten digit recognition through MNIST dataset #########\n#################################################################\n\nlibrary(\"h2o\")\n\nh2o.init(nthreads=-1,max_mem_size=\"3G\")\n\nsetwd (\"c://R\")\n\ntrain_mnist=read.csv(\"mnist_train_100.csv\", header=FALSE)\nattach(train_mnist)\nnames(train_mnist)\n\ntest_mnist=read.csv(\"mnist_test_10.csv\", header=FALSE)\nattach(test_mnist)\nnames(test_mnist)\n\nm = matrix(unlist(train_mnist[10,-1]), \n nrow = 28, \n byrow = TRUE)\n\nimage(m,col=grey.colors(255))\n\nrotate = function(x) t(apply(x, 2, rev)) \n\nimage(rotate(m),col=grey.colors(255))\n\npar(mfrow=c(2,3))\nlapply(1:6, \n function(x) image(\n rotate(matrix(unlist(train_mnist[x,-1]),\n nrow = 28, \n byrow = TRUE)),\n col=grey.colors(255),\n xlab=train_mnist[x,1]\n )\n)\n\npar(mfrow=c(1,1))\n\nstr(train_mnist)\n\nx=2:785\ny=1\n\ntable(train_mnist[,y])\n\nmodel=h2o.deeplearning(x,\n y,\n as.h2o(train_mnist),\n model_id=\"MNIST_deeplearning\",\n seed=405,\n activation=\"RectifierWithDropout\",\n l1=0.00001,\n input_dropout_ratio=0.2,\n classification_stop = -1,\n epochs=2000\n )\n\nsummary(model)\n\nh2o.scoreHistory(model)\n\npreds=h2o.performance(model, \n as.h2o(test_mnist))\n\nnewdata = h2o.predict(model, \n as.h2o(test_mnist))\n\npredictions = cbind(as.data.frame(seq(1,10)),\n test_mnist[,1],\n as.data.frame(newdata[,1]))\n\nnames(predictions) = c(\"Number\",\"Actual\",\"Predicted\")\n\nas.matrix(predictions)\n#################################################################\n```", "```py\nlibrary(\"h2o\")\nh2o.init(nthreads=-1,max_mem_size=\"3G\")\n```", "```py\n> h2o.init(nthreads=-1,max_mem_size=\"3G\")\nH2O is not running yet, starting it now...\nNote: In case of errors look at the following log files:\n C:\\Users\\lavoro\\AppData\\Local\\Temp\\Rtmpiit6zE/h2o_lavoro_started_from_r.out\n C:\\Users\\lavoro\\AppData\\Local\\Temp\\Rtmpiit6zE/h2o_lavoro_started_from_r.err\njava version \"1.7.0_40\"\nJava(TM) SE Runtime Environment (build 1.7.0_40-b43)\nJava HotSpot(TM) 64-Bit Server VM (build 24.0-b56, mixed mode)\nStarting H2O JVM and connecting: ..... Connection successful!\nR is connected to the H2O cluster: \n H2O cluster uptime: 15 seconds 229 milliseconds \n H2O cluster version: 3.10.5.3 \n H2O cluster version age: 2 months and 18 days \n H2O cluster name: H2O_started_from_R_lavoro_huu267 \n H2O cluster total nodes: 1 \n H2O cluster total memory: 2.67 GB \n H2O cluster total cores: 4 \n H2O cluster allowed cores: 4 \n H2O cluster healthy: TRUE \n H2O Connection ip: localhost \n H2O Connection port: 54321 \n H2O Connection proxy: NA \n H2O Internal Security: FALSE \n R Version: R version 3.4.1 (2017-06-30)\n```", "```py\nsetwd(\"C://R\")\n```", "```py\ntrain_mnist=read.csv(\"mnist_train_100.csv\", header=FALSE)\nattach(train_mnist)\nnames(train_mnist)\n```", "```py\ntest_mnist=read.csv(\"mnist_test_10.csv\", header=FALSE)\nattach(test_mnist)\nnames(test_mnist)\n```", "```py\nm = matrix(unlist(train_mnist[10,-1]),\n + nrow = 28,\n + byrow = TRUE)\n```", "```py\nimage(m,col=grey.colors(255))\n```", "```py\n> rotate = function(x) t(apply(x, 2, rev))\n```", "```py\n> image(rotate(m),col=grey.colors(255))\n```", "```py\npar(mfrow=c(2,3))\nlapply(1:6,\n function(x) image(\n rotate(matrix(unlist(train_mnist[x,-1]),\n nrow = 28,\n byrow = TRUE)),\n col=grey.colors(255),\n xlab=train_mnist[x,1]\n )\n)\n```", "```py\n par(mfrow=c(1,1)) \n```", "```py\nstr(train_mnist)\nx=2:785\ny=1 \n```", "```py\ntable(train_mnist[,y]) \n```", "```py\n> table(train_mnist[,y])\n 0  1  2  3  4  5  6  7  8  9\n13 14  6 11 11  5 11 10  8 11\n```", "```py\nmodel=h2o.deeplearning(x,\n y,\n as.h2o(train_mnist),\n model_id=\"MNIST_deeplearning\",\n seed=405,\n activation=\"RectifierWithDropout\",\n l1=0.00001,\n input_dropout_ratio=0.2,\n classification_stop = -1,\n epochs=2000\n)\n```", "```py\nsummary(model)\n```", "```py\npreds=h2o.performance(model,\n as.h2o(test_mnist))\n```", "```py\nnewdata = h2o.predict(model,\n as.h2o(test_mnist))\n```", "```py\npredictions = cbind(as.data.frame(seq(1,10)),\n test_mnist[,1],\n as.data.frame(newdata[,1]))\n```", "```py\nnames(predictions) = c(\"Number\",\"Actual\",\"Predicted\")\n```", "```py\nas.matrix(predictions)\n```", "```py\n> as.matrix(predictions)\n Number Actual   Predicted\n [1,]      1      7  6.90180840\n [2,]      2      3  3.62368445\n [3,]      3      1  0.53782891\n [4,]      4      0 -0.03092147\n [5,]      5      6  5.21024129\n [6,]      6      1  0.30850593\n [7,]      7      6  6.44916207\n [8,]      8      9  3.59962551\n [9,]      9      5  3.17590073\n[10,]     10      9  7.35213625\n```", "```py\n#################################################################\n### Chapter 7 - Neural Networks with R - Use cases      #########\n### Prediction using LSTM on IRIS dataset               #########\n#################################################################\n\n##Required one time\nlibrary(\"mxnet\")\n\ndata(iris)\n\nx = iris[1:5!=5,-5]\ny = as.integer(iris$Species)[1:5!=5]\n\ntrain.x = data.matrix(x)\ntrain.y = y\n\ntest.x = data.matrix(iris[1:5==5,-5])\ntest.y = as.integer(iris$Species)[1:5==5]\n\nmodel <- mx.mlp(train.x, train.y, hidden_node=10, out_node=3, out_activation=\"softmax\",\n num.round=20, array.batch.size=15, learning.rate=0.07, momentum=0.9,\n eval.metric=mx.metric.accuracy)\n\npreds = predict(model, test.x)\npred.label = max.col(t(preds))\n\ntest.y\npred.label\n#################################################################\n```", "```py\ncran <- getOption(\"repos\")\ncran[\"dmlc\"] <- \"https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/\"\noptions(repos = cran)\ninstall.packages(\"mxnet\")\n```", "```py\npackage ‘bindr’ successfully unpacked and MD5 sums checked\npackage ‘brew’ successfully unpacked and MD5 sums checked\npackage ‘assertthat’ successfully unpacked and MD5 sums checked\npackage ‘bindrcpp’ successfully unpacked and MD5 sums checked\npackage ‘glue’ successfully unpacked and MD5 sums checked\npackage ‘pkgconfig’ successfully unpacked and MD5 sums checked\npackage ‘BH’ successfully unpacked and MD5 sums checked\npackage ‘plogr’ successfully unpacked and MD5 sums checked\npackage ‘yaml’ successfully unpacked and MD5 sums checked\npackage ‘irlba’ successfully unpacked and MD5 sums checked\npackage ‘hms’ successfully unpacked and MD5 sums checked\npackage ‘XML’ successfully unpacked and MD5 sums checked\npackage ‘Rook’ successfully unpacked and MD5 sums checked\npackage ‘tidyselect’ successfully unpacked and MD5 sums checked\npackage ‘gridExtra’ successfully unpacked and MD5 sums checked\npackage ‘dplyr’ successfully unpacked and MD5 sums checked\npackage ‘downloader’ successfully unpacked and MD5 sums checked\npackage ‘htmltools’ successfully unpacked and MD5 sums checked\npackage ‘htmlwidgets’ successfully unpacked and MD5 sums checked\npackage ‘igraph’ successfully unpacked and MD5 sums checked\npackage ‘influenceR’ successfully unpacked and MD5 sums checked\npackage ‘purrr’ successfully unpacked and MD5 sums checked\npackage ‘readr’ successfully unpacked and MD5 sums checked\npackage ‘rstudioapi’ successfully unpacked and MD5 sums checked\npackage ‘rgexf’ successfully unpacked and MD5 sums checked\npackage ‘tidyr’ successfully unpacked and MD5 sums checked\npackage ‘viridis’ successfully unpacked and MD5 sums checked\npackage ‘DiagrammeR’ successfully unpacked and MD5 sums checked\npackage ‘visNetwork’ successfully unpacked and MD5 sums checked\npackage ‘data.table’ successfully unpacked and MD5 sums checked\npackage ‘mxnet’ successfully unpacked and MD5 sums checked\n```", "```py\nlibrary(\"mxnet\")\n```", "```py\ndata(iris)\nx = iris[1:5!=5,-5]\ny = as.integer(iris$Species)[1:5!=5]\n```", "```py\nx = iris[1:5!=5,-5]\n```", "```py\ntrain.x = data.matrix(x)\ntrain.y = y\n```", "```py\ntest.x = data.matrix(iris[1:5==5,-5])\ntest.y = as.integer(iris$Species)[1:5==5]\n```", "```py\nmodel <- mx.mlp(train.x, train.y, hidden_node=10, out_node=3, out_activation=\"softmax\",\n num.round=20, array.batch.size=15, learning.rate=0.07, momentum=0.9,\n eval.metric=mx.metric.accuracy)\n```", "```py\npreds = predict(model, test.x)\npred.label = max.col(t(preds))\n```", "```py\ntest.y\npred.label\n```", "```py\n> test.y\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\n> pred.label\n [1] 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n```", "```py\nlibrary(h2o)\nh2o.init()\n\nausPath = system.file(\"extdata\", \"australia.csv\", package=\"h2o\")\naustralia.hex = h2o.uploadFile(path = ausPath)\nsummary(australia.hex)\n\npca_model=h2o.prcomp(training_frame = australia.hex, \n k = 8, \n transform = \"STANDARDIZE\")\n\nsummary(pca_model)\nbarplot(as.numeric(pca_model@model$importance[2,]),\n main=\"Pca model\", \n xlab=\"Pca component\",\n ylab=\"Proportion of Variance\")\n```", "```py\nlibrary(h2o)\n```", "```py\nh2o.init()\n```", "```py\n> h2o.init()\n Connection successful!\n\nR is connected to the H2O cluster: \n H2O cluster uptime: 5 hours 40 minutes \n H2O cluster version: 3.10.5.3 \n H2O cluster version age: 2 months and 18 days \n H2O cluster name: H2O_started_from_R_lavoro_huu267 \n H2O cluster total nodes: 1 \n H2O cluster total memory: 2.63 GB \n H2O cluster total cores: 4 \n H2O cluster allowed cores: 4 \n H2O cluster healthy: TRUE \n H2O Connection ip: localhost \n H2O Connection port: 54321 \n H2O Connection proxy: NA \n H2O Internal Security: FALSE \n R Version: R version 3.4.1 (2017-06-30) \n```", "```py\nc1=h2o.init(max_mem_size = \"2G\", \n nthreads = 2, \n ip = \"localhost\", \n port = 54321)\n```", "```py\nausPath = system.file(\"extdata\", \"australia.csv\", package=\"h2o\")\naustralia.hex = h2o.uploadFile(path = ausPath)\n```", "```py\nsummary(australia.hex)\n```", "```py\npca_model=h2o.prcomp(training_frame = australia.hex, \n k = 8, \n transform = \"STANDARDIZE\")\n```", "```py\nsummary(pca_model)\n```", "```py\n#################################################################\n### Chapter 7 - Neural Networks with R - Use cases      #########\n### Autoencoder using H2O on a movie dataset            #########\n#################################################################\n\nlibrary(\"h2o\")\n\nsetwd (\"c://R\")\n#Load the training dataset of movies\nmovies=read.csv ( \"movies.csv\", header=TRUE)\nhead(movies)\n\nmodel=h2o.deeplearning(2:3, \n training_frame=as.h2o(movies),\n hidden=c(2), \n autoencoder = T, \n activation=\"Tanh\")\n\nsummary(model)\n\nfeatures=h2o.deepfeatures(model,\n as.h2o(movies),\n layer=1)\n\nd=as.matrix(features[1:10,])\nlabels=as.vector(movies[1:10,2])\nplot(d,pch=17)\ntext(d,labels,pos=3)\n```", "```py\nlibrary(\"h2o\")\nsetwd (\"c://R\")\n```", "```py\nmovies=read.csv( \"movies.csv\", header=TRUE)\n```", "```py\nhead(movies)\n```", "```py\nmodel=h2o.deeplearning(2:3, \n training_frame=as.h2o(movies),\n hidden=c(2), \n autoencoder = T, \n activation=\"Tanh\")\n```", "```py\nsummary(model)\n```", "```py\nfeatures=h2o.deepfeatures(model,\n as.h2o(movies),\n layer=1)\n```", "```py\n> features\n DF.L1.C1 DF.L1.C2\n1 0.2569208 -0.2837829\n2 0.3437048 -0.2670669\n3 0.2969089 -0.4235294\n4 0.3214868 -0.3093819\n5 0.5586608 0.5829145\n6 0.2479671 -0.2757966\n[9125 rows x 2 columns]\n```", "```py\nd=as.matrix(features[1:10,])\nlabels=as.vector(movies[1:10,2])\nplot(d,pch=17)\ntext(d,labels,pos=3)\n```", "```py\n #  Attribute                     Domain\n   -- -----------------------------------------\n   1\\. Sample code number            id number\n   2\\. Clump Thickness               1 - 10\n   3\\. Uniformity of Cell Size       1 - 10\n   4\\. Uniformity of Cell Shape      1 - 10\n   5\\. Marginal Adhesion             1 - 10\n   6\\. Single Epithelial Cell Size   1 - 10\n   7\\. Bare Nuclei                   1 - 10\n   8\\. Bland Chromatin               1 - 10\n   9\\. Normal Nucleoli               1 - 10\n  10\\. Mitoses                       1 - 10\n  11\\. Class:                        (2 for benign, 4 for malignant)\n\n```", "```py\n#####################################################################\n####Chapter 7 - Neural Networks with R #########\n####Breast Cancer Detection using darch package #########\n#####################################################################\nlibrary(\"mlbench\")\nlibrary(\"darch\")\n\ndata(BreastCancer)\nsummary(BreastCancer)\n\ndata_cleaned <- na.omit(BreastCancer) \nsummary(data_cleaned)\n\nmodel <- darch(Class ~ ., data_cleaned,layers = c(10, 10, 1),\n darch.numEpochs = 50, darch.stopClassErr = 0, retainData = T)\n\nplot(model)\n\npredictions <- predict(model, newdata = data_cleaned, type = \"class\")\ncat(paste(\"Incorrect classifications:\", sum(predictions != data_cleaned[,11])))\ntable(predictions,data_cleaned[,11])\n\nlibrary(gmodels)\nCrossTable(x = data_cleaned$Class, y = predictions,\n prop.chisq=FALSE)\n```", "```py\nlibrary(\"mlbench\")\nlibrary(\"darch\")\n```", "```py\ndata(BreastCancer)\n```", "```py\nsummary(BreastCancer)\n```", "```py\ndata_cleaned <- na.omit(BreastCancer) \n```", "```py\nmodel <- darch(Class ~ ., data_cleaned,layers = c(10, 10, 1),\n darch.numEpochs = 50, darch.stopClassErr = 0, retainData = T)\n```", "```py\nplot(model)\n```", "```py\npredictions <- predict(model, newdata = data_cleaned, type = \"class\")\n```", "```py\ncat(paste(\"Incorrect classifications:\", sum(predictions != data_cleaned[,11])))\n```", "```py\n> cat(paste(\"Incorrect classifications:\", sum(predictions != data_cleaned[,11])))\nIncorrect classifications: 2\n```", "```py\ntable(predictions,data_cleaned[,11])\n```", "```py\n> table(predictions,data_cleaned[,11])\n\npredictions benign malignant\n benign       443         1\n malignant      1       238\n```", "```py\nlibrary(gmodels)\nCrossTable(x = data_cleaned$Class, y = predictions,\n prop.chisq=FALSE)\n```", "```py\n> Accuracy = (443+238)/683\n> Accuracy\n[1] 0.9970717\n```"]