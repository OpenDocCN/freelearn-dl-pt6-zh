["```py\n<dependency>\n <groupId>org.deeplearning4j</groupId>\n <artifactId>rl4j-core</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\n<dependency>\n <groupId>org.deeplearning4j</groupId>\n <artifactId>rl4j-malmo</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\n<dependency>\n <groupId>org.nd4j</groupId>\n <artifactId>nd4j-native-platform</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\n<dependency>\n <groupId>org.nd4j</groupId>\n <artifactId>nd4j-cuda-10.0</artifactId>\n <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\n<dependency>\n <groupId>com.microsoft.msr.malmo</groupId>\n <artifactId>MalmoJavaJar</artifactId>\n <version>0.30.0</version>\n </dependency>\n```", "```py\nSample:\n <ServerInitialConditions>\n <Time>\n <StartTime>6000</StartTime>\n <AllowPassageOfTime>false</AllowPassageOfTime>\n </Time>\n <Weather>clear</Weather>\n <AllowSpawning>false</AllowSpawning>\n </ServerInitialConditions>\n```", "```py\n\n<FlatWorldGenerator generatorString=\"3;7,220*1,5*3,2;3;,biome_1\"/>\n```", "```py\nSample:\n <DrawingDecorator>\n <!-- coordinates for cuboid are inclusive -->\n <DrawCuboid x1=\"-2\" y1=\"46\" z1=\"-2\" x2=\"7\" y2=\"50\" z2=\"18\" type=\"air\" />\n <DrawCuboid x1=\"-2\" y1=\"45\" z1=\"-2\" x2=\"7\" y2=\"45\" z2=\"18\" type=\"lava\" />\n <DrawCuboid x1=\"1\" y1=\"45\" z1=\"1\" x2=\"3\" y2=\"45\" z2=\"12\" type=\"sandstone\" />\n <DrawBlock x=\"4\" y=\"45\" z=\"1\" type=\"cobblestone\" />\n <DrawBlock x=\"4\" y=\"45\" z=\"12\" type=\"lapis_block\" />\n <DrawItem x=\"4\" y=\"46\" z=\"12\" type=\"diamond\" />\n </DrawingDecorator>\n```", "```py\n<ServerQuitFromTimeUp timeLimitMs=\"100000000\"/>\n```", "```py\n<ServerHandlers>\n <FlatWorldGenerator>{Copy from step 3}</FlatWorldGenerator>\n <DrawingDecorator>{Copy from step 4}</DrawingDecorator>\n <ServerQuitFromTimeUp>{Copy from step 5}</ServerQuitFromTimeUp>\n </ServerHandlers>\n```", "```py\n<ServerSection>\n <ServerInitialConditions>{Copy from step 1}</ServerInitialConditions>\n <ServerHandlers>{Copy from step 6}</ServerHandlers>\n </ServerSection>\n```", "```py\nSample:\n <Name>Cristina</Name>\n <AgentStart>\n   <Placement x=\"4.5\" y=\"46.0\" z=\"1.5\" pitch=\"30\" yaw=\"0\"/>\n </AgentStart>\n```", "```py\nSample:\n <ObservationFromGrid>\n  <Grid name=\"floor\">\n  <min x=\"-4\" y=\"-1\" z=\"-13\"/>\n  <max x=\"4\" y=\"-1\" z=\"13\"/>\n  </Grid>\n </ObservationFromGrid>\n```", "```py\nSample:\n <VideoProducer viewpoint=\"1\" want_depth=\"false\">\n <Width>320</Width>\n <Height>240</Height>\n </VideoProducer>\n```", "```py\nSample:\n <RewardForTouchingBlockType>\n <Block reward=\"-100.0\" type=\"lava\" behaviour=\"onceOnly\"/>\n <Block reward=\"100.0\" type=\"lapis_block\" behaviour=\"onceOnly\"/>\n </RewardForTouchingBlockType>\n```", "```py\nSample:\n <RewardForSendingCommand reward=\"-1\"/>\n```", "```py\n<AgentQuitFromTouchingBlockType>\n  <Block type=\"lava\" />\n  <Block type=\"lapis_block\" />\n </AgentQuitFromTouchingBlockType>\n```", "```py\n<AgentHandlers>\n   <ObservationFromGrid>{Copy from step 9}</ObservationFromGrid>\n   <VideoProducer></VideoProducer> // Copy from step 10\n   <RewardForTouchingBlockType>{Copy from step 11}</RewardForTouchingBlockType>\n   <RewardForSendingCommand> // Copy from step 12\n   <AgentQuitFromTouchingBlockType>{Copy from step 13}  </AgentQuitFromTouchingBlockType>\n </AgentHandlers>\n```", "```py\n<AgentSection mode=\"Survival\">\n     <AgentHandlers>\n        {Copy from step 14}\n     </AgentHandlers>\n </AgentSection>\n```", "```py\nDataManager manager = new DataManager(false);\n```", "```py\nviewpoint=0 -> first-person\n viewpoint=1 -> behind\n viewpoint=2 -> facing\n\n```", "```py\nSample:\n MalmoActionSpaceDiscrete actionSpace =\n new MalmoActionSpaceDiscrete(\"movenorth 1\", \"movesouth 1\", \"movewest 1\", \"moveeast 1\");\n actionSpace.setRandomSeed(rndSeed);\n\n```", "```py\nMalmoObservationSpace observationSpace = new MalmoObservationSpacePixels(xSize, ySize);\n```", "```py\nMalmoDescretePositionPolicy obsPolicy = new MalmoDescretePositionPolicy();\n```", "```py\nSample:\n MalmoEnv mdp = new MalmoEnv(\"cliff_walking_rl4j.xml\", actionSpace, observationSpace, obsPolicy);\n```", "```py\nSample:\n public static DQNFactoryStdConv.Configuration MALMO_NET = new DQNFactoryStdConv.Configuration(\n learingRate,\n l2RegParam,\n updaters,\n listeners\n );\n```", "```py\nSample:\n public static HistoryProcessor.Configuration MALMO_HPROC = new HistoryProcessor.Configuration(\n numOfFrames,\n rescaledWidth,\n rescaledHeight,\n croppingWidth,\n croppingHeight,\n offsetX,\n offsetY,\n numFramesSkip\n );\n```", "```py\nSample:\n public static QLearning.QLConfiguration MALMO_QL = new QLearning.QLConfiguration(\n rndSeed,\n maxEpochStep,\n maxStep,\n expRepMaxSize,\n batchSize,\n targetDqnUpdateFreq,\n updateStart,\n rewardFactor,\n gamma,\n errorClamp,\n minEpsilon,\n epsilonNbStep,\n doubleDQN\n );\n```", "```py\nSample:\n QLearningDiscreteConv<MalmoBox> dql =\n new QLearningDiscreteConv<MalmoBox>(mdp, MALMO_NET, MALMO_HPROC, MALMO_QL, manager);\n```", "```py\ndql.train();\n```", "```py\nMissionSpec mission = MalmoEnv.loadMissionXML(\"cliff_walking_rl4j.xml\");\n```", "```py\nmission.drawBlock(xValue, yValue, zValue, \"lava\");\"\n malmoEnv.setMission(mission);\n```", "```py\nDQNPolicy<MalmoBox> pol = dql.getPolicy();\n pol.save(\"cliffwalk_pixel.policy\");\n```", "```py\nDQNPolicy<MalmoBox> pol = DQNPolicy.load(\"cliffwalk_pixel.policy\");\n\n```", "```py\nSample:\n MalmoEnv mdp = new MalmoEnv(\"cliff_walking_rl4j.xml\", actionSpace, observationSpace, obsPolicy);\n```", "```py\nSample:\n double rewards = 0;\n for (int i = 0; i < 10; i++) {\n double reward = pol.play(mdp, new HistoryProcessor(MALMO_HPROC));\n rewards += reward;\n Logger.getAnonymousLogger().info(\"Reward: \" + reward);\n }\n```"]