["```py\n# Importing the libraries   #3\nimport pandas as pd   #4\nimport numpy as np   #5\nimport keras   #6\nfrom sklearn.model_selection import train_test_split   #7\nfrom sklearn.preprocessing import MinMaxScaler   #8\nfrom keras.layers import Dense, Dropout   #9\nfrom keras.models import Sequential   #10\nfrom keras.optimizers import Adam   #11 \n```", "```py\n# Importing the dataset   #13\ndataset = pd.read_csv('kc_house_data.csv')   #14 \n```", "```py\n# Getting separately the features and the targets   #16\nX = dataset.iloc[:, 3:].values   #17\nX = X[:, np.r_[0:13,14:18]]   #18\ny = dataset.iloc[:, 2].values   #19 \n```", "```py\n# Splitting the dataset into a training set and a test set   #21\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)   #22 \n```", "```py\n# Scaling the features   #24\nxscaler = MinMaxScaler(feature_range = (0,1))   #25\nX_train = xscaler.fit_transform(X_train)   #26\nX_test = xscaler.transform(X_test)   #27\n#28\n# Scaling the target   #29\nyscaler = MinMaxScaler(feature_range = (0,1))   #30\ny_train = yscaler.fit_transform(y_train.reshape(-1,1))   #31\ny_test = yscaler.transform(y_test.reshape(-1,1))   #32 \n```", "```py\n# Building the Artificial Neural Network   #34\nmodel = Sequential()   #35\nmodel.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu', input_dim = 17))   #36\nmodel.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))   #37\nmodel.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'relu'))   #38\nmodel.compile(optimizer = Adam(lr = 0.001), loss = 'mse', metrics = ['mean_absolute_error'])   #39 \n```", "```py\ncompile method, which describes how you want to train your net. Inside this compile method, optimizer is the tool that performs backpropagation, lr is the learning rate—the speed at which the weights in the ANN are updated. loss is how you want to calculate the error of the output (I have decided to go for the mean squared error mse), and metrics is just a value that will help you visualize performance—you can use mean absolute error.\n```", "```py\n# Training the Artificial Neural Network   #41\nmodel.fit(X_train, y_train, batch_size = 32, epochs = 100, validation_data = (X_test, y_test))   #42 \n```", "```py\n# Making predictions on the test set while reversing the scaling   #44\ny_test = yscaler.inverse_transform(y_test)   #45\nprediction = yscaler.inverse_transform(model.predict(X_test))   #46\n#47\n# Computing the error rate   #48\nerror = abs(prediction - y_test)/y_test   #49\nprint(np.mean(error))   #50 \n```"]