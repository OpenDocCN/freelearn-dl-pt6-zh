["```py\nException in thread \"main\" java.lang.IllegalStateException: C (result) array is not F order or is a view. Nd4j.gemm requires the result array to be F order and not a view. C (result) array: [Rank: 2,Offset: 0 Order: f Shape: [10,1], stride: [1,10]]\n\n```", "```py\n// convert URI to string\n final String data = IOUtils.toString(new URL(url),\"utf-8\");\n // Get sequences from the raw data\n final String[] sequences = data.split(\"\\n\");\n final List<Pair<String,Integer>> contentAndLabels = new ArrayList<>();\n int lineCount = 0;\n for(String sequence : sequences) {\n // Record each time step in new line\n sequence = sequence.replaceAll(\" +\",\"\\n\");\n // Labels: first 100 examples (lines) are label 0, second 100 examples are label 1, and so on\n contentAndLabels.add(new Pair<>(sequence, lineCount++ / 100));\n }\n```", "```py\nfor(Pair<String,Integer> sequencePair : contentAndLabels) {\n if(trainCount<450) {\n featureFile = new File(trainfeatureDir+trainCount+\".csv\");\n labelFile = new File(trainlabelDir+trainCount+\".csv\");\n trainCount++;\n } else {\n featureFile = new File(testfeatureDir+testCount+\".csv\");\n labelFile = new File(testlabelDir+testCount+\".csv\");\n testCount++;\n }\n }\n\n```", "```py\nFileUtils.writeStringToFile(featureFile,sequencePair.getFirst(),\"utf-8\");\nFileUtils.writeStringToFile(labelFile,sequencePair.getSecond().toString(),\"utf-8\");\n```", "```py\nfor(Pair<String,Integer> sequencePair : contentAndLabels) {\n     if(trainCount<traintestSplit) {\n       featureFile = new File(trainfeatureDir+trainCount+\".csv\");\n       labelFile = new File(trainlabelDir+trainCount+\".csv\");\n       trainCount++;\n     } else {\n       featureFile = new File(testfeatureDir+testCount+\".csv\");\n       labelFile = new File(testlabelDir+testCount+\".csv\");\n       testCount++;\n     }\n    FileUtils.writeStringToFile(featureFile,sequencePair.getFirst(),\"utf-8\");\n    FileUtils.writeStringToFile(labelFile,sequencePair.getSecond().toString(),\"utf-8\");\n }\n```", "```py\nSequenceRecordReader trainFeaturesSequenceReader = new CSVSequenceRecordReader();\n trainFeaturesSequenceReader.initialize(new NumberedFileInputSplit(new File(trainfeatureDir).getAbsolutePath()+\"/%d.csv\",0,449));\n```", "```py\nSequenceRecordReader trainLabelsSequenceReader = new CSVSequenceRecordReader();\n trainLabelsSequenceReader.initialize(new NumberedFileInputSplit(new File(trainlabelDir).getAbsolutePath()+\"/%d.csv\",0,449));\n```", "```py\nSequenceRecordReader testFeaturesSequenceReader = new CSVSequenceRecordReader();\n testFeaturesSequenceReader.initialize(new NumberedFileInputSplit(new File(testfeatureDir).getAbsolutePath()+\"/%d.csv\",0,149));\n SequenceRecordReader testLabelsSequenceReader = new CSVSequenceRecordReader();\n testLabelsSequenceReader.initialize(new NumberedFileInputSplit(new File(testlabelDir).getAbsolutePath()+\"/%d.csv\",0,149));|\n```", "```py\nDataSetIterator trainIterator = new SequenceRecordReaderDataSetIterator(trainFeaturesSequenceReader,trainLabelsSequenceReader,batchSize,numOfClasses);\n\nDataSetIterator testIterator = new SequenceRecordReaderDataSetIterator(testFeaturesSequenceReader,testLabelsSequenceReader,batchSize,numOfClasses);\n```", "```py\nDataSetIterator trainIterator = new SequenceRecordReaderDataSetIterator(trainFeaturesSequenceReader,trainLabelsSequenceReader,batchSize,numOfClasses,false, SequenceRecordReaderDataSetIterator.AlignmentMode.ALIGN_END);\n```", "```py\nSequenceRecordReader trainFeaturesSequenceReader = new CSVSequenceRecordReader();\n trainFeaturesSequenceReader.initialize(new NumberedFileInputSplit(new File(trainfeatureDir).getAbsolutePath()+\"/%d.csv\",0,449));\n```", "```py\nDataSetIterator trainIterator = new SequenceRecordReaderDataSetIterator(trainFeaturesSequenceReader,trainLabelsSequenceReader,batchSize,numOfClasses,false, SequenceRecordReaderDataSetIterator.AlignmentMode.ALIGN_END);\n```", "```py\nDataSetIterator trainIterator = new SequenceRecordReaderDataSetIterator(trainFeaturesSequenceReader,trainLabelsSequenceReader,batchSize,numOfClasses);\n\nDataSetIterator testIterator = new SequenceRecordReaderDataSetIterator(testFeaturesSequenceReader,testLabelsSequenceReader,batchSize,numOfClasses);\n```", "```py\nDataNormalization normalization = new NormalizerStandardize();\n normalization.fit(trainIterator);\n```", "```py\ntrainIterator.setPreProcessor(normalization);\n testIterator.setPreProcessor(normalization);\n\n```", "```py\nDataNormalization normalization = new NormalizerStandardize();\n normalization.fit(trainIterator);\n```", "```py\nNeuralNetConfiguration.Builder neuralNetConfigBuilder = new NeuralNetConfiguration.Builder();\n neuralNetConfigBuilder.seed(123);\n neuralNetConfigBuilder.weightInit(WeightInit.XAVIER);\n neuralNetConfigBuilder.updater(new Nadam());\n neuralNetConfigBuilder.gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue);\n neuralNetConfigBuilder.gradientNormalizationThreshold(0.5);\n```", "```py\nComputationGraphConfiguration.GraphBuilder compGraphBuilder = neuralNetConfigBuilder.graphBuilder();\n compGraphBuilder.addInputs(\"trainFeatures\");\n```", "```py\ncompGraphBuilder.addLayer(\"L1\", new LSTM.Builder().activation(Activation.TANH).nIn(1).nOut(10).build(), \"trainFeatures\");\n```", "```py\nneuralNetConfigBuilder.gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue);\n neuralNetConfigBuilder.gradientNormalizationThreshold(thresholdValue);\n```", "```py\ncompGraphBuilder.setOutputs(\"predictSequence\");\n```", "```py\ncompGraphBuilder.addLayer(\"predictSequence\", new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT)\n .activation(Activation.SOFTMAX).nIn(10).nOut(numOfClasses).build(), \"L1\");\n```", "```py\nComputationGraphConfiguration configuration = compGraphBuilder.build();\n   ComputationGraph model = new ComputationGraph(configuration);\n model.init();\n```", "```py\nmodel.setListeners(new ScoreIterationListener(20), new EvaluativeListener(testIterator, 1, InvocationType.EPOCH_END));\n```", "```py\nmodel.fit(trainIterator,numOfEpochs);\n```", "```py\nEvaluation evaluation = model.evaluate(testIterator);\n System.out.println(evaluation.stats());\n```", "```py\nmodel.setListeners(new ScoreIterationListener(20), new EvaluativeListener(testIterator, 1, InvocationType.EPOCH_END));\n```", "```py\nEvaluation evaluation = model.evaluate(testIterator);\n```"]