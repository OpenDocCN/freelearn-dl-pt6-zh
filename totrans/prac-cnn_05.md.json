["```py\nbottleneck_features = np.load('bottleneck_features/DogVGG16Data.npz')\ntrain_vgg16 = bottleneck_features['train']\nvalid_vgg16 = bottleneck_features['valid']\ntest_vgg16 = bottleneck_features['test']\n```", "```py\nfrom keras.layers import GlobalAveragePooling2D\n\nmodel = Sequential()\nmodel.add(GlobalAveragePooling2D(input_shape=(7, 7, 512)))\nmodel.add(Dense(133, activation='softmax'))\nmodel.summary()\nLayer (type)                     Output Shape          Param #     Connected to                     \n=================================================================================================\nglobalaveragepooling2d_1 (Global (None, 512)           0           globalaveragepooling2d_input_1[0]\n_________________________________________________________________________________________________\ndense_2 (Dense)                  (None, 133)           68229       globalaveragepooling2d_1[0][0]   \n=================================================================================================\nTotal params: 68,229\nTrainable params: 68,229\nNon-trainable params: 0\n_________________________________________________________________________________________________\n```", "```py\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', \n                  metrics=['accuracy'])\nfrom keras.callbacks import ModelCheckpoint \n\n# train the model\ncheckpointer = ModelCheckpoint(filepath='dogvgg16.weights.best.hdf5', verbose=1, \n                               save_best_only=True)\nmodel.fit(train_vgg16, train_targets, nb_epoch=20, validation_data=(valid_vgg16, valid_targets), \n          callbacks=[checkpointer], verbose=1, shuffle=True)\n```", "```py\n# load the weights that yielded the best validation accuracy\nmodel.load_weights('dogvgg16.weights.best.hdf5')\n# get index of predicted dog breed for each image in test set\nvgg16_predictions = [np.argmax(model.predict(np.expand_dims(feature, axis=0))) \n                     for feature in test_vgg16]\n\n# report test accuracy\ntest_accuracy = 100*np.sum(np.array(vgg16_predictions)==\n                           np.argmax(test_targets, axis=1))/len(vgg16_predictions)\nprint('\\nTest accuracy: %.4f%%' % test_accuracy)\n```"]