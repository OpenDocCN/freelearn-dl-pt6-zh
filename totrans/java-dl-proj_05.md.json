["```py\nZooModel zooModel = new VGG16();\nLOGGER.info(\" VGG16 model is getting downloaded...\");\nComputationGraph preTrainedNet = (ComputationGraph) zooModel.initPretrained(PretrainedType.IMAGENET);\n```", "```py\nLOGGER.info(preTrainedNet.summary());\n```", "```py\nprivate static final long seed = 12345;\nprivate static final String FREEZE_UNTIL_LAYER = \"fc2\";\nprivate static final int NUM_CLASS = 2;\n```", "```py\nFineTuneConfiguration fineTuneConf = new FineTuneConfiguration.Builder()    \n         .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n         .updater(new Adam(0.001))\n         .seed(seed)\n         .build();\n```", "```py\nComputationGraph vgg16Transfer = new TransferLearning.GraphBuilder(preTrainedNet)\n       .fineTuneConfiguration(fineTuneConf)\n       .setFeatureExtractor(FREEZE_UNTIL_LAYER)\n       .removeVertexKeepConnections(\"predictions\")\n       .setWorkspaceMode(WorkspaceMode.SEPARATE)\n       .addLayer(\"predictions\", new OutputLayer\n                  .Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n                  .nIn(4096).nOut(NUM_CLASS)\n                  .weightInit(WeightInit.XAVIER)\n                  .activation(Activation.SOFTMAX).build(), FREEZE_UNTIL_LAYER)\n       .build();\nvgg16Transfer.setListeners(new ScoreIterationListener(5));\nLOGGER.info(vgg16Transfer.summary());\n```", "```py\npublic static final Random RAND_NUM_GEN = new Random(*seed*);\npublic static final String[] ALLOWED_FORMATS = BaseImageLoader.*ALLOWED_FORMATS*;\npublic static ParentPathLabelGenerator *LABEL_GENERATOR_MAKER* = new ParentPathLabelGenerator();\npublic static BalancedPathFilter *PATH_FILTER* = new BalancedPathFilter(RAND_NUM_GEN, ALLOWED_FORMATS, LABEL_GENERATOR_MAKER);\n```", "```py\npublic static String DATA_PATH = \"data/DoG_CaT/data\";\npublic static final String TRAIN_FOLDER = DATA_PATH + \"/train\";\npublic static final String *TEST_FOLDER* = DATA_PATH + \"/test\";\nFile trainData = new File(TRAIN_FOLDER);\n```", "```py\nFileSplit train = new FileSplit(trainData, NativeImageLoader.ALLOWED_FORMATS, RAND_NUM_GEN);\n```", "```py\nprivate static final int TRAIN_SIZE = 80;\nInputSplit[] sample = train.sample(*PATH_FILTER*, TRAIN_SIZE, 100 - TRAIN_SIZE);\n```", "```py\nDataSetIterator trainIterator = getDataSetIterator(sample[0]);\nDataSetIterator devIterator = getDataSetIterator(sample[1]);\n```", "```py\npublic static DataSetIterator getDataSetIterator(InputSplit sample) throws IOException {\n    ImageRecordReader imageRecordReader = new ImageRecordReader(224, 224, 3, *LABEL_GENERATOR_MAKER*);\n    imageRecordReader.initialize(sample);\n\n    DataSetIterator iterator = new RecordReaderDataSetIterator(imageRecordReader, \n                               BATCH_SIZE, 1, NUM_CLASS);\n    iterator.setPreProcessor(new VGG16ImagePreProcessor());\n    return iterator;\n}\n```", "```py\nprivate static final int EPOCH = 100;\nprivate static final int BATCH_SIZE = 128;\nprivate static final int SAVING_INTERVAL = 100;\n```", "```py\nprivate static final String SAVING_PATH = \"bin/CatvsDog_VG16_TrainedModel_Epoch100_v1.zip\";\n```", "```py\nFile testData = new File(TEST_FOLDER);\nFileSplit test = new FileSplit(testData, NativeImageLoader.ALLOWED_FORMATS, RAND_NUM_GEN);\nDataSetIterator testIterator = *getDataSetIterator*(test.sample(*PATH_FILTER*, 1, 0)[0]);\n```", "```py\nint iEpoch = 0;\nint i = 0;\nwhile (iEpoch < EPOCH) {\n while (trainIterator.hasNext()) {\n        DataSet trained = trainIterator.next();\n        vgg16Transfer.fit(trained);\n if (i % SAVING_INTERVAL == 0 && i != 0) {\n            ModelSerializer.*writeModel*(vgg16Transfer, new File(SAVING_PATH), false);\n *evaluateOn*(vgg16Transfer, devIterator, i);\n        }\n        i++;\n    }\n    trainIterator.reset();\n    iEpoch++;\n    evaluateOn(vgg16Transfer, testIterator, iEpoch);\n}\n```", "```py\n>>>\n Cat classified by model as cat: 2444 times\n Cat classified by model as dog: 56 times\n Dog classified by model as cat: 42 times\n Dog classified by model as dog: 2458 times\n ==========================Scores==========================\n # of classes: 2\n Accuracy: 0.9800\n Precision: 0.9804\n Recall: 0.9806\n F1 Score: 0.9800\n ========================================================\n\n```", "```py\n>>>\n Cat classified by model as cat: 6178 times\n Cat classified by model as dog: 72 times\n Dog classified by model as cat: 261 times\n Dog classified by model as dog: 5989 times\n ==========================Scores===================\n # of classes: 2\n Accuracy: 0.9693\n Precision: 0.9700\n Recall: 0.9693\n F1 Score: 0.9688\n ==================================================\n```", "```py\nprivate staticfinal String TRAINED_PATH_MODEL = \"bin/CatvsDog_VG16_TrainedModel_Epoch100_v1.zip\";\nComputationGraph computationGraph = ModelSerializer.restoreComputationGraph(new File(TRAINED_PATH_MODEL));\n\nVG16CatvDogEvaluator().runOnTestSet(computationGraph);\nVG16CatvDogEvaluator().runOnValidationSet(computationGraph);\n```", "```py\nprivate void runOnTestSet(ComputationGraph computationGraph) throws IOException {\n        File trainData = new File(TrainCatvsDogVG16.TEST_FOLDER);\n        FileSplit test = new FileSplit(trainData, NativeImageLoader.ALLOWED_FORMATS,             \n                                       TrainCatvsDogVG16.RAND_NUM_GEN);\n\n        InputSplit inputSplit = test.sample(TrainCatvsDogVG16.*PATH_FILTER*, 100, 0)[0];\n        DataSetIterator dataSetIterator = TrainCatvsDogVG16.getDataSetIterator(inputSplit);\n        TrainCatvsDogVG16.evaluateOn(computationGraph, dataSetIterator, 1);\n}\n```", "```py\nprivate void runOnValidationSet(ComputationGraph computationGraph) throws IOException {\n        File trainData = new File(TrainCatvsDogVG16.TRAIN_FOLDER);\n        FileSplit test = new FileSplit(trainData, NativeImageLoader.ALLOWED_FORMATS,     \n                                       TrainCatvsDogVG16.RAND_NUM_GEN);\n\n        InputSplit inputSplit = test.sample(TrainCatvsDogVG16.*PATH_FILTER*, 15, 80)[0];\n        DataSetIterator dataSetIterator = TrainCatvsDogVG16.getDataSetIterator(inputSplit);\n        TrainCatvsDogVG16.evaluateOn(computationGraph, dataSetIterator, 1);\n}\n```", "```py\n19:54:52.496 [pool-1-thread-1] INFO org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend\n19:54:52.534 [pool-1-thread-1] WARN org.reflections.Reflections - given scan urls are empty. set urls in the configuration\n19:54:52.865 [pool-1-thread-1] INFO org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 4\n19:54:53.249 [pool-1-thread-1] INFO org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 4\n19:54:53.252 [pool-1-thread-1] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Backend used: [CPU]; OS: [Windows 10]\n19:54:53.252 [pool-1-thread-1] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Cores: [8]; Memory: [7.0GB];\n19:54:53.252 [pool-1-thread-1] INFO org.nd4j.linalg.api.ops.executioner.DefaultOpExecutioner - Blas vendor: [OPENBLAS]\n19:55:09.015 [pool-1-thread-1] DEBUG org.reflections.Reflections - going to scan these urls:\n ...\n9:55:13.394 [pool-1-thread-1] INFO org.deeplearning4j.nn.graph.ComputationGraph - Starting ComputationGraph with WorkspaceModes set to [training: NONE; inference: SEPARATE]\n19:55:13.394 [pool-1-thread-1] DEBUG org.reflections.Reflections - going to scan these urls:\n19:55:13.779 [pool-1-thread-1] INFO com.packt.JavaDL.DogvCatClassification.UI.UI - Model loaded successfully!\n```", "```py\n//Print the number of parameters in the network (and for each layer)\nLayer[] layers = model.getLayers();\nint totalNumParams = 0;\n\nfor( int i=0; i<layers.length; i++ ){\n         int nParams = layers[i].numParams();\n         System.*out*.println(\"Number of parameters in layer \" + i + \": \" + nParams);\n         totalNumParams += nParams;\n}\nSystem.*out*.println(\"Total number of network parameters: \" + totalNumParams);\n>>>\n Number of parameters in layer 0: 1792\n Number of parameters in layer 1: 36928\n Number of parameters in layer 2: 0\n Number of parameters in layer 3: 73856\n Number of parameters in layer 4: 147584\n Number of parameters in layer 5: 0\n Number of parameters in layer 6: 295168\n Number of parameters in layer 7: 590080\n Number of parameters in layer 8: 590080\n Number of parameters in layer 9: 0\n Number of parameters in layer 10: 1180160\n Number of parameters in layer 11: 2359808\n Number of parameters in layer 12: 2359808\n Number of parameters in layer 13: 0\n Number of parameters in layer 14: 2359808\n Number of parameters in layer 15: 2359808\n Number of parameters in layer 16: 2359808\n Number of parameters in layer 17: 0\n Number of parameters in layer 18: 102764544\n Number of parameters in layer 19: 16781312\n Number of parameters in layer 20: 8194\n Total number of network parameters: 134268738\n```"]