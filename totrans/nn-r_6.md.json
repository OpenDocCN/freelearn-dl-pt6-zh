["```py\ninstall.packages(\"rnn\")\nlibrary(\"rnn\")\n```", "```py\n> library(\"rnn\")\nError: package or namespace load failed for ‘rnn’ in get(Info[i, 1], envir = env):\n cannot open file 'C:/Users/Giuseppe/Documents/R/win-library/3.4/digest/R/digest.rdb': No such file or directory\n```", "```py\ninstall.packages(\"digest\")\n```", "```py\nrun.rnn_demo()\n```", "```py\ntrainr(Y, X, \n learningrate, \n learningrate_decay = 1, \n momentum = 0, \n hidden_dim = c(10), \n network_type = \"rnn\", \n numepochs = 1, \n sigmoid = c(\"logistic\", \"Gompertz\", \"tanh\"), \n use_bias = F, \n batch_size = 1, \n seq_to_seq_unsync = F, \n update_rule = \"sgd\", \n epoch_function = c(epoch_print, epoch_annealing), \n loss_function = loss_L1, ...) \n\npredictr(model, \n X, \n hidden = FALSE, \n real_output = T, \n arguments to pass to sigmoid function)\n```", "```py\nlibrary(\"rnn\")\n\n#Create a set of random numbers in X1 and X2\nX1=sample(0:127, 7000, replace=TRUE)\nX2=sample(0:127, 7000, replace=TRUE)\n\n#Create training response numbers\nY=X1 + X2\n\n# Convert to binary\nX1=int2bin(X1)\nX2=int2bin(X2)\nY=int2bin(Y)\n\n# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables.\nX=array( c(X1,X2), dim=c(dim(X1),2) )\n\n# Train the model\nmodel <- trainr(Y=Y[,dim(Y)[2]:1],\n X=X[,dim(X)[2]:1,],\n learningrate = 0.1,\n hidden_dim = 10,\n batch_size = 100,\n numepochs = 100)\n\nplot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')\n\n# Create test inputs\nA1=int2bin(sample(0:127, 7000, replace=TRUE))\nA2=int2bin(sample(0:127, 7000, replace=TRUE))\n\n# Create 3d array: dim 1: samples; dim 2: time; dim 3: variables\nA=array( c(A1,A2), dim=c(dim(A1),2) )\n\n# Now, let us run prediction for new A\nB=predictr(model,\n A[,dim(A)[2]:1,] )\nB=B[,dim(B)[2]:1]\n\n# Convert back to integers\nA1=bin2int(A1)\nA2=bin2int(A2)\nB=bin2int(B)\n\n# Plot the differences as histogram\nhist( B-(A1+A2) )\n```", "```py\nlibrary(\"rnn\")\n```", "```py\nX1=sample(0:127, 7000, replace=TRUE)\nX2=sample(0:127, 7000, replace=TRUE)\n```", "```py\nY = X1 + X2\n```", "```py\nX1=int2bin(X1)\nX2=int2bin(X2)\nY=int2bin(Y)\n```", "```py\n> head(X1,n=10)\n [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n [1,]    1    1    1    0    0    1    0    0\n [2,]    0    0    0    1    0    0    0    0\n [3,]    1    0    0    0    1    0    1    0\n [4,]    0    0    0    0    0    0    1    0\n [5,]    0    1    0    0    0    0    0    0\n [6,]    0    0    0    1    1    1    0    0\n [7,]    1    0    1    1    0    1    1    0\n [8,]    1    1    0    0    0    1    0    0\n [9,]    1    0    1    0    0    0    0    0\n[10,]    0    0    0    1    0    0    0    0\n```", "```py\nX=array( c(X1,X2), dim=c(dim(X1),2) )\n```", "```py\nmodel <- trainr(Y=Y[,dim(Y)[2]:1],\n X=X[,dim(X)[2]:1,],\n learningrate = 0.1,\n hidden_dim = 10,\n batch_size = 100,\n numepochs = 100)\n```", "```py\nTrained epoch: 90 - Learning rate: 0.1\nEpoch error: 3.42915263914405\nTrained epoch: 91 - Learning rate: 0.1\nEpoch error: 3.44100549476955\nTrained epoch: 92 - Learning rate: 0.1\nEpoch error: 3.43627697030863\nTrained epoch: 93 - Learning rate: 0.1\nEpoch error: 3.43541472188254\nTrained epoch: 94 - Learning rate: 0.1\nEpoch error: 3.43753094787383\nTrained epoch: 95 - Learning rate: 0.1\nEpoch error: 3.43622412149714\nTrained epoch: 96 - Learning rate: 0.1\nEpoch error: 3.43604894997742\nTrained epoch: 97 - Learning rate: 0.1\nEpoch error: 3.4407798878595\nTrained epoch: 98 - Learning rate: 0.1\nEpoch error: 3.4472752590403\nTrained epoch: 99 - Learning rate: 0.1\nEpoch error: 3.43720125450988\nTrained epoch: 100 - Learning rate: 0.1\nEpoch error: 3.43542353819336\n```", "```py\nplot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')\n```", "```py\nA1=int2bin(sample(0:127, 7000, replace=TRUE))\nA2=int2bin(sample(0:127, 7000, replace=TRUE))\nA=array( c(A1,A2), dim=c(dim(A1),2) )\n```", "```py\nB=predictr(model, A[,dim(A)[2]:1,] ) \nB=B[,dim(B)[2]:1]\n```", "```py\nA1=bin2int(A1)\nA2=bin2int(A2)\nB=bin2int(B)\n```", "```py\nhist( B-(A1+A2) )\n```", "```py\n##########################################################\n### Chapter 6 - Introduction to RNNs - using R  ##########\n########## Humidity forecasting with RNNs#################\n##########################################################\n library(\"rattle.data\")\nlibrary(\"rnn\")\n\ndata(weatherAUS)\nView(weatherAUS)\n\n#extract only 1 and 14 clumn and first 3040 rows (Albury location)\ndata=weatherAUS[1:3040,c(1,14)]\nsummary(data)\n\ndata_cleaned <- na.omit(data) \ndata_used=data_cleaned[1:3000]\n\nx=data_cleaned[,1]\ny=data_cleaned[,2]\n\nhead(x)\nhead(y)\n\nX=matrix(x, nrow = 30)\nY=matrix(y, nrow = 30)\n\n# Standardize in the interval 0 - 1\nYscaled = (Y - min(Y)) / (max(Y) - min(Y))\nY=t(Yscaled)\n\ntrain=1:70\ntest=71:100\n\nmodel <- trainr(Y = Y[train,],\n X = Y[train,],\n learningrate = 0.05,\n hidden_dim = 16,\n numepochs = 1000)\n\nplot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')\n\nYp <- predictr(model, Y[test,])\n\nplot(as.vector(t(Y[test,])), col = 'red', type='l', \n main = \"Actual vs Predicted Humidity: testing set\", \n ylab = \"Y,Yp\")\nlines(as.vector(t(Yp)), type = 'l', col = 'black')\nlegend(\"bottomright\", c(\"Predicted\", \"Actual\"), \n col = c(\"red\",\"black\"), \n lty = c(1,1), lwd = c(1,1))\n\n############################################################\n```", "```py\nlibrary(\"rattle.data\")\nlibrary(\"rnn\")\n```", "```py\ndata(weatherAUS)\nView(weatherAUS)\n```", "```py\ndata=weatherAUS[1:3040,c(1,14)]\n```", "```py\n> summary(data)\n Date             Humidity9am \n Min.   :2008-12-01   Min.   : 18.00 \n 1st Qu.:2010-12-30   1st Qu.: 61.00 \n Median :2013-04-27   Median : 76.00 \n Mean   :2013-03-22   Mean   : 74.07 \n 3rd Qu.:2015-05-27   3rd Qu.: 88.00 \n Max.   :2017-06-25   Max.   :100.00 \n NA's   :9 \n```", "```py\ndata_cleaned <- na.omit(data) \ndata_used=data_cleaned[1:3000]\n```", "```py\nx=data_cleaned[,1]\ny=data_cleaned[,2]\n```", "```py\nX=matrix(x, nrow = 30)\nY=matrix(y, nrow = 30)\n```", "```py\nYscaled = (Y - min(Y)) / (max(Y) - min(Y))\nY=t(Yscaled)\n```", "```py\ntrain=1:70\ntest=71:100\n```", "```py\nmodel <- trainr(Y = Y[train,],\n X = Y[train,],\n learningrate = 0.05,\n hidden_dim = 16,\n numepochs = 1000)\n```", "```py\nTrained epoch: 990 - Learning rate: 0.05\nEpoch error: 0.382192317958489\nTrained epoch: 991 - Learning rate: 0.05\nEpoch error: 0.376313106021699\nTrained epoch: 992 - Learning rate: 0.05\nEpoch error: 0.380178990096884\nTrained epoch: 993 - Learning rate: 0.05\nEpoch error: 0.379260612039631\nTrained epoch: 994 - Learning rate: 0.05\nEpoch error: 0.380475314573825\nTrained epoch: 995 - Learning rate: 0.05\nEpoch error: 0.38169633378182\nTrained epoch: 996 - Learning rate: 0.05\nEpoch error: 0.373951666567461\nTrained epoch: 997 - Learning rate: 0.05\nEpoch error: 0.374880624458934\nTrained epoch: 998 - Learning rate: 0.05\nEpoch error: 0.384185799764121\nTrained epoch: 999 - Learning rate: 0.05\nEpoch error: 0.381408598560978\nTrained epoch: 1000 - Learning rate: 0.05\nEpoch error: 0.375245688144538\n```", "```py\nplot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')\n```", "```py\nYp <- predictr(model, Y[test,])\n```", "```py\nplot(as.vector(t(Y[test,])), col = 'red', type='l', \n main = \"Actual vs Predicted Humidity: testing set\", \n ylab = \"Y,Yp\")\nlines(as.vector(t(Yp)), type = 'l', col = 'black')\nlegend(\"bottomright\", c(\"Predicted\", \"Actual\"), \n col = c(\"red\",\"black\"), \n lty = c(1,1), lwd = c(1,1))\n```"]