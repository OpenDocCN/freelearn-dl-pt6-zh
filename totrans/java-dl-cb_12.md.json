["```py\nINDArray array = Nd4j.rand(6, 6);\n INDArray mean = array.mean(1);\n INDArray result = mean.detach();\n```", "```py\nNd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();\n```", "```py\nLayerWorkspaceMgr.leverageTo(ArrayType.ACTIVATIONS, myArray);\n```", "```py\nmodel.setListeners(new PerformanceListener(frequency,reportScore)); \n```", "```py\n<dependency>\n   <groupId>org.deeplearning4j</groupId>\n   <artifactId>deeplearning4j-cuda-x.x</artifactId> //cuda version to be specified\n   <version>1.0.0-beta4</version>\n </dependency>\n```", "```py\nMultiLayerNetwork config = new NeuralNetConfiguration.Builder()\n .cudnnAlgoMode(ConvolutionLayer.AlgoMode.PREFER_FASTEST) //prefer performance over memory\n .build();\n```", "```py\nParallelWrapper wrapper = new ParallelWrapper.Builder(model)\n .prefetchBuffer(deviceCount)\n.workers(Nd4j.getAffinityManager().getNumberOfDevices())\n.trainingMode(ParallelWrapper.TrainingMode.SHARED_GRADIENTS)\n.thresholdAlgorithm(new AdaptiveThresholdAlgorithm())\n .build();\n```", "```py\nParallelInference inference = new ParallelInference.Builder(model)\n .inferenceMode(InferenceMode.BATCHED)\n.batchLimit(maxBatchSize)\n .workers(workerCount)\n .build();\n\n```", "```py\nNd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();\n```", "```py\nLayerWorkspaceMgr.create(ArrayType.ACTIVATIONS,myArray);\n```", "```py\n-Xms1G -Xmx6G -Dorg.bytedeco.javacpp.maxbytes=16G -Dorg.bytedeco.javacpp.maxphysicalbytes=20G\n```", "```py\njava -Xms1G -Xmx6G -Dorg.bytedeco.javacpp.maxbytes=16G -Dorg.bytedeco.javacpp.maxphysicalbytes=20G YourClassName\n\n```", "```py\njava -XX:+UseG1GC\n```", "```py\nNd4j.getMemoryManager().setAutoGcWindow(3000);\n```", "```py\nNd4j.getMemoryManager().togglePeriodicGc(false);\n```", "```py\nWorkspaceConfiguration memoryMap = WorkspaceConfiguration.builder()\n .initialSize(2000000000)\n .policyLocation(LocationPolicy.MMAP)\n .build();\n try (MemoryWorkspace workspace = Nd4j.getWorkspaceManager().getAndActivateWorkspace(memoryMap, \"M\")) {\n INDArray example = Nd4j.create(10000);\n }\n```", "```py\n-Xms1G -Xmx6G -Dorg.bytedeco.javacpp.maxbytes=16G -Dorg.bytedeco.javacpp.maxphysicalbytes=20G\n```", "```py\nDatasetIterator asyncIterator = new AsyncMultiDataSetIterator(iterator);\n```", "```py\nDataSetIterator shieldIterator = new AsyncShieldDataSetIterator(iterator);\n```", "```py\n<dependency>\n   <groupId>org.deeplearning4j</groupId>\n   <artifactId>arbiter-deeplearning4j</artifactId>\n   <version>1.0.0-beta3</version>\n </dependency>\n <dependency>\n   <groupId>org.deeplearning4j</groupId>\n   <artifactId>arbiter-ui_2.11</artifactId>\n   <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\nParameterSpace<Double> learningRateParam = new ContinuousParameterSpace(0.0001,0.01);\n```", "```py\nParameterSpace<Integer> layerSizeParam = new IntegerParameterSpace(5,11);   \n```", "```py\nOptimizationConfiguration optimizationConfiguration = new             OptimizationConfiguration.Builder()\n .candidateGenerator(candidateGenerator)\n .dataProvider(dataProvider)\n .modelSaver(modelSaver)\n .scoreFunction(scoreFunction)\n .terminationConditions(conditions)\n .build();\n```", "```py\nParameterSpace<Double> learningRateParam = new ContinuousParameterSpace(0.0001,0.01);\n```", "```py\nParameterSpace<Integer> layerSizeParam = new IntegerParameterSpace(startLimit,endLimit);\n```", "```py\nParameterSpace<Double> learningRateParam = new ContinuousParameterSpace(0.0001,0.01);\n```", "```py\nMultiLayerSpace hyperParamaterSpace = new MultiLayerSpace.Builder()\n .updater(new AdamSpace(learningRateParam))\n .addLayer(new DenseLayerSpace.Builder()\n   .activation(Activation.RELU)\n   .nIn(11)\n   .nOut(layerSizeParam)\n   .build())\n .addLayer(new DenseLayerSpace.Builder()\n   .activation(Activation.RELU)\n   .nIn(layerSizeParam)\n   .nOut(layerSizeParam)\n   .build())\n .addLayer(new OutputLayerSpace.Builder()\n   .activation(Activation.SIGMOID)\n   .lossFunction(LossFunctions.LossFunction.XENT)\n   .nOut(1)\n   .build())\n .build();\n\n```", "```py\nMap<String,Object> dataParams = new HashMap<>();\n dataParams.put(\"batchSize\",new Integer(10));\n\nCandidateGenerator candidateGenerator = new RandomSearchGenerator(hyperParamaterSpace,dataParams);\n```", "```py\npublic static class ExampleDataSource implements DataSource{\n  public ExampleDataSource(){\n     //implement methods from DataSource\n  }\n }\n```", "```py\npublic void configure(Properties properties) {\n    this.minibatchSize = Integer.parseInt(properties.getProperty(\"minibatchSize\", \"16\"));\n }\n```", "```py\npublic Class<?> getDataType() {\n return DataSetIterator.class;\n }\n```", "```py\npublic Object trainData() {\n try{\n DataSetIterator iterator = new RecordReaderDataSetIterator(dataPreprocess(),minibatchSize,labelIndex,numClasses);\n return dataSplit(iterator).getTestIterator();\n }\n catch(Exception e){\n throw new RuntimeException();\n }\n }\n```", "```py\npublic Object testData() {\n try{\n DataSetIterator iterator = new RecordReaderDataSetIterator(dataPreprocess(),minibatchSize,labelIndex,numClasses);\n return dataSplit(iterator).getTestIterator();\n }\n catch(Exception e){\n throw new RuntimeException();\n }\n }\n```", "```py\nTerminationCondition[] conditions = {\n   new MaxTimeCondition(maxTimeOutInMinutes, TimeUnit.MINUTES),\n   new MaxCandidatesCondition(maxCandidateCount)\n};\n```", "```py\nScoreFunction scoreFunction = new EvaluationScoreFunction(Evaluation.Metric.ACCURACY);\n```", "```py\nOptimizationConfiguration optimizationConfiguration = new OptimizationConfiguration.Builder()\n .candidateGenerator(candidateGenerator)\n .dataSource(ExampleDataSource.class,dataSourceProperties)\n .modelSaver(modelSaver)\n .scoreFunction(scoreFunction)\n .terminationConditions(conditions)\n .build();\n```", "```py\nIOptimizationRunner runner = new LocalOptimizationRunner(optimizationConfiguration,new MultiLayerNetworkTaskCreator());\n```", "```py\nrunner.addListeners(new LoggingStatusListener());\n```", "```py\nrunner.execute();\n```", "```py\nStatsStorage storage = new FileStatsStorage(new File(\"HyperParamOptimizationStatsModel.dl4j\"));\n runner.addListeners(new ArbiterStatusListener(storage));\n```", "```py\nUIServer.getInstance().attach(storage);\n```", "```py\nhttp://localhost:9000/arbiter\n```", "```py\ndouble bestScore = runner.bestScore();\n int bestCandidateIndex = runner.bestScoreCandidateIndex();\n int numberOfConfigsEvaluated = runner.numCandidatesCompleted();\n```", "```py\nProperties dataSourceProperties = new Properties();\n dataSourceProperties.setProperty(\"minibatchSize\", \"64\");\n```", "```py\nResultSaver modelSaver = new FileModelSaver(\"resources/\");\n```"]