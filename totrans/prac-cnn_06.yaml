- en: Autoencoders for CNN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing to Autoencoders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convolutional Autoencoder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications of Autoencoders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing to autoencoders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An autoencoder is a regular neural network, an unsupervised learning model
    that takes an input and produces the same input in the output layer. So, there
    is no associated label in the training data. Generally, an autoencoder consists
    of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Encoder network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoder network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It learns all the required features from unlabeled training data, which is known
    as lower dimensional feature representation. In the following figure, the input
    data (*x*) is passed through an encoder that produces a compressed representation
    of the input data. Mathematically, in the equation, *z = h(x)*,*z* is a feature
    vector, and is usually a smaller dimension than *x*.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we take these produced features from the input data and pass them through
    a decoder network to reconstruct the original data.
  prefs: []
  type: TYPE_NORMAL
- en: 'An encoder can be a fully connected neural network or a **convolutional neural
    network** (**CNN**). A decoder also uses the same kind of network as an encoder. Here,
    we''ve explained and implemented the encoder and decoder function using ConvNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c90369e-7ca4-48a3-b473-30c24faaecd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Loss function: *||x - x||²*'
  prefs: []
  type: TYPE_NORMAL
- en: In this network, the size of the input and the output layers is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Convolutional autoencoder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A convolutional autoencoder is a neural network (a special case of an unsupervised
    learning model) that is trained to reproduce its input image in the output layer.
    An image is passed through an encoder, which is a ConvNet that produces a low-dimensional
    representation of the image. The decoder, which is another sample ConvNet, takes
    this compressed image and reconstructs the original image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The encoder is used to compress the data and the decoder is used to reproduce
    the original image. Therefore, autoencoders may be used for data, compression.
    Compression logic is data-specific, meaning it is learned from data rather than
    predefined compression algorithms such as JPEG, MP3, and so on. Other applications
    of autoencoders can be image denoising (producing a cleaner image from a corrupted
    image), dimensionality reduction, and image search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a8a64d7-7d61-446e-96ac-808858df19af.png)'
  prefs: []
  type: TYPE_IMG
- en: This differs from regular ConvNets or neural nets in the sense that the input
    size and the target size must be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autoencoders are used for dimensionality reduction, or data compression, and
    image denoising. Dimensionality reduction, in turn, helps in improving runtime
    performance and consumes less memory. An image search can become highly efficient
    in low-dimension spaces.
  prefs: []
  type: TYPE_NORMAL
- en: An example of compression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Network architecture comprises of an encoder network, which is a typical
    convolutional pyramid. Each convolutional layer is followed by a max-pooling layer;
    this reduces the dimensions of the layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The decoder converts the input from a sparse representation to a wide reconstructed
    image. A schematic of the network is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c58f5c9-4f78-423e-a375-4e94c7b5a9e3.png)'
  prefs: []
  type: TYPE_IMG
- en: The encoder layer output image size is 4 x 4 x 8 = 128\. The original image
    size was 28 x 28 x 1 = 784, so the compressed image vector is roughly 16% of the
    size of the original image.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, you'll see transposed convolution layers used to increase the width
    and height of the layers. They work almost exactly the same as convolutional layers
    but in reverse. A stride in the input layer results in a larger stride in the
    transposed convolution layer. For example, if you have a 3 x 3 kernel, a 3 x 3
    patch in the input layer will be reduced to one unit in a convolutional layer.
    Comparatively, one unit in the input layer will be expanded into a 3 x 3 path
    in a transposed convolution layer. The TensorFlow API provides us with an easy
    way to create the layers: `tf.nn.conv2d_transpose`, click here, [https://www.tensorflow.org/api_docs/python/tf/nn/conv2d_transpose](https://www.tensorflow.org/api_docs/python/tf/nn/conv2d_transpose).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this chapter with a short introduction to autoencoders, and we implemented
    the encoder and decoder function with the help of ConvNets.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved to convolutional autoencoders and learned how they are different
    from regular ConvNets and neural nets.
  prefs: []
  type: TYPE_NORMAL
- en: We walked through the different applications of autoencoders, with an example,
    and saw how an autoencoder enhances the efficiency of image searches in low-dimension
    spaces.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will study object detection with CNNs and learn the
    difference between object detection and object classification.
  prefs: []
  type: TYPE_NORMAL
