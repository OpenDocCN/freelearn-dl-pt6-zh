["```py\n    wget http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz \n    tar -xvzf lfw-funneled.tgz\n\n    ```", "```py\n    base_path = <Path to lfw directory>\n    python create_tfrecords.py\n\n    ```", "```py\n    python train_generate.py\n\n    ```", "```py\n    python image_correction.py --is_complete True --latest_ckpt  <checkpoint number>\n\n    ```", "```py\n    docker build -t keras-recognition-service .\n\n    ```", "```py\n    docker run -it --rm -d -p <host port>:<container port> -v <host path>:<container path> keras-recognition-service\n\n    ```", "```py\n    docker run -it --rm -d -p 5000:80 -v /Users/kuntalg/knowledge:/deep/model keras-recognition-service\n\n    ```", "```py\n    #!/bin/bash\n    echo \"Prediction for 1st Image:\"\n    echo \"--------------------------------\"\n    (echo -n '{\"data\": \"'; base64 test-1.jpg; echo '\"}') | curl -X POST -H \"Content-Type: application/json\" -d @- http://127.0.0.1:5000\n\n    echo \"Prediction for 2nd Image:\"\n    echo \"--------------------------------\"\n    (echo -n '{\"data\": \"'; base64 test-1.jpg; echo '\"}') | curl -X POST -H \"Content-Type: application/json\" -d @- http://127.0.0.1:5000\n    ```", "```py\n     ./test_requests.sh\n\n    ```", "```py\n    gcloud components install kubectl\n\n    ```", "```py\n    gcloud config set project <project ID>\n    gcloud config set compute/zone <zone name such as us-central1-b>\n    export PROJECT_ID=\"$(gcloud config get-value project -q)\n\n    ```", "```py\n    docker build -t gcr.io/<project ID>/keras-recognition-service:v1 .\n\n    ```", "```py\n    docker build -t gcr.io/deeplearning-123456/keras-recognition-service:v1 .\n\n    ```", "```py\n    gcloud docker -- push gcr.io/<project ID>/keras-recognition-service:v1\n\n    ```", "```py\n    gcloud docker -- push gcr.io/deeplearning-123456/keras-recognition-service:v1\n\n    ```", "```py\n    gcloud container clusters create dl-cluster --num-nodes=2\n\n    ```", "```py\n    gcloud container clusters get-credentials dl-cluster\n\n    kubectl run keras-recognition-service --image=gcr.io/deeplearning-123456/keras-recognition-service:v1 --port 80\n\n    ```", "```py\n    kubectl expose deployment keras-recognition-service --type=LoadBalancer --port 80 --target-port 80\n\n    ```", "```py\n    kubectl get service\n\n    ```", "```py\n    (echo -n '{\"data\": \"'; base64 test-1.jpeg; echo '\"}') | curl -X POST -H \"Content-Type: application/json\" -d @- http://<External IP>:80\n\n    ```", "```py\n    classify_image_graph_def.pb\n    imagenet_synset_to_human_label_map.txt\n    imagenet_synset_to_human_label_map.txt\n    ```", "```py\n    def lambda_handler(event, context):\n\n        if not os.path.exists('/tmp/imagenetV3/'):\n            os.makedirs('/tmp/imagenetV3/')\n\n        # imagenet_synset_to_human_label_map.txt:\n        #   Map from synset ID to a human readable string.\n        strBucket = 'kg-image-prediction'\n        strKey = 'models/imagenetV3/imagenet_synset_to_human_label_map.txt'\n        strFile = '/tmp/imagenetV3/imagenet_synset_to_human_label_map.txt'\n        downloadFromS3(strBucket,strKey,strFile)  \n        print(strFile)\n\n        # imagenet_2012_challenge_label_map_proto.pbtxt:\n        #   Text representation of a protocol buffer mapping a label to synset ID.\n\n        strBucket = 'kg-image-prediction'\n        strKey = 'models/imagenetV3/imagenet_2012_challenge_label_map_proto.pbtxt'\n        strFile = '/tmp/imagenetV3/imagenet_2012_challenge_label_map_proto.pbtxt'\n        downloadFromS3(strBucket,strKey,strFile)\n        print(strFile) \n\n        # classify_image_graph_def.pb:\n        #   Binary representation of the GraphDef protocol buffer.\n        strBucket = 'kg-image-prediction'\n        strKey = 'models/imagenetV3/classify_image_graph_def.pb'\n        strFile = '/tmp/imagenetV3/classify_image_graph_def.pb'\n        downloadFromS3(strBucket,strKey,strFile)\n        print(strFile)\n        data = base64.b64decode(event['base64Image'])\n        imageName= event['imageName']\n\n        image=io.BytesIO(data)\n        strBucket = 'kg-image-prediction'\n\n        strKey = 'raw-image/tensorflow/'+imageName+'.png'\n        uploadToS3(image, strBucket, strKey)\n        print(\"Image file uploaded to S3\")\n\n        audioKey=imageName+'.mp3'\n        print(audioKey)\n        print(\"Ready to Run inference\")\n\n        strBucket = 'kg-image-prediction'\n        strKey = 'raw-image/tensorflow/'+imageName+'.png'\n        imageFile = '/tmp/'+imageName+'.png'\n        downloadFromS3(strBucket,strKey,imageFile)\n        print(\"Image downloaded from S3\")\n\n        strResult = run_inference_on_image(imageFile)\n\n        # Invoke AWS Polly to generate Speech from text\n        polly_client=boto3.client('polly')\n        response = polly_client.synthesize_speech(Text =strResult,OutputFormat = \"mp3\",VoiceId = \"Joanna\")\n        if \"AudioStream\" in response:\n            output = os.path.join(\"/tmp\", audioKey)\n            with open(output, \"wb\") as file:\n                file.write(response[\"AudioStream\"].read())\n\n        #Upload speech to S3\n        print(\"Ready upload to S3 audio\")\n        strBucket = 'kg-image-prediction'\n        strKey = 'audio/'+audioKey\n        strFile = '/tmp/'+audioKey\n\n        with open(strFile, 'rb') as data:\n            uploadToS3(data,strBucket,strKey)\n        # Clean up directory\n        os.remove(imageFile)\n        os.remove(strFile)\n\n        return strResult\n    ```", "```py\n    {\n    \"base64Image\": \"$input.body\",\n    \"imageName\": \"$input.params(imageName)\"\n    }\n    ```", "```py\n    mkdir lambda\n    cd lambda\n    unzip lambda_tensorflow.zip\n\n    ```", "```py\n    rm -rf tensorflow*\n    pip install tensorflow==1.2.0 -t /home/ec2-user/lambda\n\n    ```", "```py\n    zip â€“r lambda_tensorflow.zip *\n\n    ```", "```py\n    from __future__ import print_function\n\n    import json\n    import urllib\n    import boto3\n    import base64\n    import io\n\n    print('Loading function')\n\n    s3 = boto3.client('s3')\n    rekognition = boto3.client(\"rekognition\", <aws-region name like us-west-1>)\n\n    bucket=<Put your Bucket Name>\n    key_path='raw-image/'\n\n    def lambda_handler(event, context):\n\n        output={}\n        try:\n            if event['operation']=='label-detect':\n                print('Detecting label')\n                fileName= event['fileName']\n                bucket_key=key_path + fileName\n                data = base64.b64decode(event['base64Image'])\n                image=io.BytesIO(data)\n                s3.upload_fileobj(image, bucket, bucket_key)\n                rekog_response = rekognition.detect_labels(Image={\"S3Object\": {\"Bucket\": bucket,\"Name\": bucket_key,}},MaxLabels=5,MinConfidence=90,)\n                for label in rekog_response['Labels']:\n                    output[label['Name']]=label['Confidence']\n            else:\n                print('Detecting faces')\n                FEATURES_BLACKLIST = (\"Landmarks\", \"Emotions\", \"Pose\", \"Quality\", \"BoundingBox\", \"Confidence\")\n                fileName= event['fileName']\n                bucket_key=key_path + fileName\n                data = base64.b64decode(event['base64Image'])\n                image=io.BytesIO(data)\n                s3.upload_fileobj(image, bucket, bucket_key)\n                face_response = rekognition.detect_faces(Image={\"S3Object\": {\"Bucket\": bucket,  \"Name\": bucket_key, }}, Attributes=['ALL'],)\n                for face in face_response['FaceDetails']:\n                    output['Face']=face['Confidence']\n                    for emotion in face['Emotions']:\n                        output[emotion['Type']]=emotion['Confidence']\n                    for feature, data in face.iteritems():\n                        if feature not in FEATURES_BLACKLIST:\n                            output[feature]=data\n        except Exception as e:\n            print(e)\n            raise e    \n\n        return output      \n    ```", "```py\n    {\n    \"base64Image\": \"$input.body\",\n    \"operation\": \"$input.params('activity')\",\n    \"fileName\": \"$input.params('fileName')\"\n    }\n    ```"]