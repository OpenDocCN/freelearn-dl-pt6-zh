["```py\nimageDir/car/image000.png\nimageDir/car/image001.png\n...\nimageDir/truck/image000.png\nimageDir/truck/image001.png\n...\nimageDir/motorbike/image000.png\nimageDir/motorbike/image001.png\n...\n```", "```py\nimport org.datavec.image.loader.NativeImageLoader\nimport org.deeplearning4j.spark.util.SparkDataUtils\n...\nval sourcePath = \"/home/guglielmo/trainingImages\"\nval sourceDir = new File(sourcePath)\nval destinationPath = \"/home/guglielmo/preprocessedImages\"\nval destDir = new File(destinationPath)\nval batchSize = 32\nSparkDataUtils.createFileBatchesLocal(sourceDir, NativeImageLoader.ALLOWED_FORMATS, true, destDir, batchSize)\n```", "```py\nval sourceDirectory = \"hdfs:///guglielmo/trainingImages\"; \nval destinationDirectory = \"hdfs:///guglielmo/preprocessedImages\";    \nval batchSize = 32\n\nval conf = new SparkConf\n...\nval sparkContext = new JavaSparkContext(conf)\n\nval filePaths = SparkUtils.listPaths(sparkContext, sourceDirectory, true, NativeImageLoader.ALLOWED_FORMATS)\nSparkDataUtils.createFileBatchesSpark(filePaths, destinationDirectory, batchSize, sparkContext)\n```", "```py\nval conf = new SparkConf\n...\nval sparkContext = new JavaSparkContext(conf)\nval trainingMaster = ...\nval net:ComputationGraph = ...\nval sparkNet = new SparkComputationGraph(sparkContext, net, trainingMaster)\nsparkNet.setListeners(new PerformanceListener(10, true))\n```", "```py\nval imageHeightWidth = 64      \nval imageChannels = 3          \nval labelMaker = new ParentPathLabelGenerator\nval rr = new ImageRecordReader(imageHeightWidth, imageHeightWidth, imageChannels, labelMaker)\nrr.setLabels(new TinyImageNetDataSetIterator(1).getLabels())\nval numClasses = TinyImageNetFetcher.NUM_LABELS\nval loader = new RecordReaderFileBatchLoader(rr, minibatch, 1, numClasses)\nloader.setPreProcessor(new ImagePreProcessingScaler)\n```", "```py\nval trainPath = \"hdfs:///guglielmo/preprocessedImages\"\nval pathsTrain = SparkUtils.listPaths(sc, trainPath)\nval numEpochs = 10\nfor (i <- 0 until numEpochs) {\n    println(\"--- Starting Training: Epoch {} of {} ---\", (i + 1), numEpochs)\n    sparkNet.fitPaths(pathsTrain, loader)\n} \n```"]