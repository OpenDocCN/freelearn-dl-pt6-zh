["```py\nusing MLAgents;\nusing UnityEngine;\n\nnamespace Packt.HoDLG\n{\n  public class TestingAcademy : Academy\n  {\n    public GameObject goal;\n    public int numGoals; \n    public Vector3 goalSize;\n    public Vector3 goalCenter;\n    public TestingAgent[] agents;\n    public GameObject[] goals;\n  }\n}\n```", "```py\npublic override void InitializeAcademy()\n{\n  agents = FindObjectsOfType<TestingAgent>();\n  goals = new GameObject[numGoals];\n}\n```", "```py\npublic override void AcademyReset()\n{\n  if (goalSize.magnitude > 0)\n  {\n    for(int i = 0; i < numGoals; i++)\n    {\n    if(goals[i] != null && goals[i].activeSelf)\n      Destroy(goals[i]);\n    }\n    for(int i = 0; i < numGoals; i++)\n    {\n      var x = Random.Range(-goalSize.x / 2 + goalCenter.x, goalSize.x / 2 + goalCenter.x);\n      var y = Random.Range(-goalSize.y / 2 + goalCenter.y, goalSize.y / 2 + goalCenter.y);\n      var z = Random.Range(-goalSize.z / 2 + goalCenter.z, goalSize.z / 2 + goalCenter.z);\n     goals[i] = Instantiate(goal, new Vector3(x, y, z), Quaternion.identity, transform);\n   }\n  }\n}\n```", "```py\nusing MLAgents;\nusing UnityEngine;\n\nnamespace Packt.HoDLG\n{\n  public class TestingAgent : Agent\n  {\n    public string[] axisAction; \n    protected Vector3 resetPos;\n    protected Quaternion resetRot;\n  }\n}\n```", "```py\npublic override void InitializeAgent()\n{\n  base.InitializeAgent();\n  if (axisAction.Length != brain.brainParameters.vectorActionSize[0])\n    throw new MLAgents.UnityAgentsException(\"Axis actions must match agent actions\");\n\n  resetPos = transform.position;\n  resetRot = transform.rotation;\n}\n```", "```py\npublic override void CollectObservations(){  }\n```", "```py\npublic override void AgentAction(float[] vectorAction, string textAction)\n{\n  AddReward(-1f / agentParameters.maxStep);\n  MoveAgent(vectorAction);\n}\n\npublic void MoveAgent(float[] act)\n{\n  for(int i=0;i<act.Length;i++)\n  {\n    var val = Mathf.Clamp(act[i], -1f, 1f);\n    TestingInput.Instance.setAxis(val,axisAction[i]);\n  } \n}\n```", "```py\nusing UnityEngine;\n\nnamespace Packt.HoDLG\n{\n  /// <summary>\n  /// Inherit from this base class to create a singleton.\n  /// e.g. public class MyClassName : Singleton<MyClassName> {}\n  /// </summary>\n  public class Singleton<T> : MonoBehaviour where T : MonoBehaviour\n  {\n    // Check to see if we're about to be destroyed.\n    private static bool m_ShuttingDown = false;\n    private static object m_Lock = new object();\n    private static T m_Instance;\n    /// <summary>\n    /// Access singleton instance through this propriety.\n    /// </summary>\n    public static T Instance\n    {\n      get\n      {\n        if (m_ShuttingDown)\n        {\n          Debug.LogWarning(\"[Singleton] Instance '\" + typeof(T) +\n             \"' already destroyed. Returning null.\");\n          return null;\n        }\n        lock (m_Lock)\n        {\n          if (m_Instance == null)\n          {\n            // Search for existing instance.\n            m_Instance = (T)FindObjectOfType(typeof(T));\n            // Create new instance if one doesn't already exist.\n            if (m_Instance == null)\n            {\n              // Need to create a new GameObject to attach the singleton to.\n              var singletonObject = new GameObject();\n              m_Instance = singletonObject.AddComponent<T>();\n              singletonObject.name = typeof(T).ToString() + \" (Singleton)\";\n              // Make instance persistent.\n              DontDestroyOnLoad(singletonObject);\n            }\n          }\n          return m_Instance;\n        }\n      } \n    }\n    private void OnApplicationQuit()\n    {\n      m_ShuttingDown = true;\n    }\n    private void OnDestroy()\n    {\n      m_ShuttingDown = true;\n    }\n  }\n}\n```", "```py\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace Packt.HoDLG\n{\n  public class TestingInput : Singleton<TestingInput>\n  {\n    public string[] axes;\n    public bool isPlayer;    \n  }\n}\n```", "```py\nvoid Start()\n{\n  axisValues = new Dictionary<string, float>();\n  //reset the axes to zero\n  foreach(var axis in axes)\n  {\n    axisValues.Add(axis, 0);\n  }\n}\n```", "```py\npublic void setAxis(float value, string axisName)\n{\n  if (isPlayer == false && axes.Contains(axisName)) //don't if player mode\n  {\n    axisValues[axisName] = value;\n  }\n}\npublic float getAxis(string axisName)\n{\n  if (isPlayer)\n  {\n    return Input.GetAxis(axisName);\n  }\n  else if(axes.Contains(axisName))\n  {\n    return axisValues[axisName];\n  }\n  else\n  { return 0; }\n}\n```", "```py\ncase ControlTypeFree.windows:\n  verticalInput = Input.GetAxis (_verticalInput);\n  horizontalInput = Input.GetAxis (_horizontalInput);\n  mouseXInput = Input.GetAxis (_mouseXInput);\n  mouseYInput = Input.GetAxis (_mouseYInput);\n  mouseScrollWheelInput = Input.GetAxis (_mouseScrollWheelInput);\n  break;\n}\n```", "```py\nverticalInput = TestingInput.Instance.getAxis(_verticalInput);\nhorizontalInput = TestingInput.Instance.getAxis(_horizontalInput);\n```", "```py\npublic void MoveAgent(float[] act)\n{\n  for(int i=0;i<act.Length;i++)\n  {\n    var val = Mathf.Clamp(act[i], -1f, 1f);\n    TestingInput.Instance.setAxis(val,axisAction[i]);\n  } \n}\n```", "```py\nTestingLearningBrain:\n    use_recurrent: true\n    sequence_length: 64\n    num_layers: 1\n    hidden_units: 128\n    memory_size: 256\n    beta: 1.0e-2\n    gamma: 0.99\n    num_epoch: 3\n    buffer_size: 1024\n    batch_size: 64\n    max_steps: 5.0e5\n    summary_freq: 1000\n    time_horizon: 64\n```", "```py\nmlagents-learn config/trainer_config.yaml --run-id=testing --train\n```", "```py\nTestingLearningBrain:\n    trainer: offline_bc\n    max_steps: 5.0e5\n    num_epoch: 5\n    batch_size: 64\n    batches_per_epoch: 5\n    num_layers: 2\n    hidden_units: 128\n    sequence_length: 16\n    use_recurrent: true\n    memory_size: 256\n    sequence_length: 32\n    demo_path: ./UnitySDK/Assets/Demonstrations/Testing.demo\n```", "```py\nmlagents-learn config/offline_bc_config.yaml --run-id=testing_il --train\n```", "```py\nusing UnityEngine;\n\nnamespace Packt.HoDLG\n{\n public class TestingAnalytics : Singleton<TestingAnalytics>\n {\n private TestingAcademy academy;\n private TestingAgent[] agents;\n private void Start()\n {\n academy = FindObjectOfType<TestingAcademy>();\n agents = FindObjectsOfType<TestingAgent>();\n }\n public string CurrentGameState\n {\n get\n {\n var state = string.Empty;\n foreach (var agent in agents)\n {\n foreach (var goal in academy.goals)\n {\n var distance = Vector3.Distance(goal.transform.position, agent.transform.position);\n state += agent.name + \" distance to goal \" + distance + \"/n\";\n }\n }\n return state;\n }\n }\n }\n}\n```"]