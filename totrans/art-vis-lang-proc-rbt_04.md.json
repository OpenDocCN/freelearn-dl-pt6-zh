["```py\n    from sklearn.datasets import load_boston\n    boston = load_boston()\n    boston.data\n    ```", "```py\n    from sklearn.preprocessing import MinMaxScaler\n    import numpy as np\n\n    scaler = MinMaxScaler()\n    x = scaler.fit_transform(boston.data)\n\n    aux = boston.target.reshape(boston.target.shape[0], 1)\n    y = scaler.fit_transform(aux)\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n    print('Shape of x_train {}'.format(x_train.shape))\n    print('Shape of y_train {}'.format(y_train.shape))\n    print('Shape of x_test {}'.format(x_test.shape))\n    print('Shape of y_test {}'.format(y_test.shape))\n    ```", "```py\n    import tensorflow as tf\n    from keras.models import Sequential\n    from keras.layers import Dense\n    tf.set_random_seed(1)\n    ```", "```py\n    model = Sequential()\n\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(32, activation='relu'))\n    model.add(Dense(1))\n\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    ```", "```py\n    history = model.fit(x_train, y_train, batch_size=32, epochs=5, verbose=2)\n    ```", "```py\n    error = model.evaluate(x_test, y_test)\n    print('MSE: {:.5f}'.format(error))\n    ```", "```py\n    import matplotlib.pyplot as plt\n\n    prediction = model.predict(x_test)\n    print('Prediction shape: {}'.format(prediction.shape))\n\n    plt.plot(range(len(x_test)), prediction.reshape(prediction.shape[0]), '--r')\n    plt.plot(range(len(y_test)), y_test)\n    plt.show()\n    ```", "```py\n    import tensorflow as tf\n    from keras.models import Sequential\n    from keras.layers import LSTM, Dense\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    serie = 1000\n    x_aux = [] #Natural numbers until serie\n    x_aux = np.arange(serie)\n    serie = (np.sin(2 * np.pi * 4 * x_aux / serie) + 1) / 2\n    ```", "```py\n    plt.plot(x_aux, serie)\n    plt.show()\n    ```", "```py\n    #Prepare input data\n    maxlen = 5\n    seq = []\n    res = []\n    for i in range(0, len(serie) - maxlen):\n        seq.append(serie[i:maxlen+i])\n        res.append(serie[maxlen+i])\n    print(seq[:5])\n    print(res[:5])\n    ```", "```py\n    x = np.array(seq)\n    y = np.array(res)\n    x = x.reshape(x.shape[0], x.shape[1], 1)\n    y = y.reshape(y.shape[0], 1)\n    print('Shape of x {}'.format(x.shape))\n    print('Shape of y {}'.format(y.shape))\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n    print('Shape of x_train {}'.format(x_train.shape))\n    print('Shape of y_train {}'.format(y_train.shape))\n    print('Shape of x_test {}'.format(x_test.shape))\n    print('Shape of y_test {}'.format(y_test.shape))\n    ```", "```py\n    tf.set_random_seed(1)\n    model = Sequential()\n    model.add(LSTM(1, input_shape=(maxlen, 1)))   \n    model.add(Dense(1, activation='linear'))      \n    model.compile(loss='mse', optimizer='rmsprop')\n    ```", "```py\n    history = model.fit(x_train, y_train, batch_size=32, epochs=5, verbose=2)\n    error = model.evaluate(x_test, y_test)\n    print('MSE: {:.5f}'.format(error))\n    ```", "```py\n    prediction = model.predict(x_test)\n    print('Prediction shape: {}'.format(prediction.shape))\n    plt.plot(range(len(x_test)), prediction.reshape(prediction.shape[0]), '--r')\n    plt.plot(range(len(y_test)), y_test)\n    plt.show()\n    ```", "```py\n    model2 = Sequential()\n    model2.add(LSTM(4,input_shape=(maxlen,1)))\n    model2.add(Dense(1, activation='sigmoid'))\n    model2.compile(loss='mse', optimizer='rmsprop')\n    ```", "```py\n    history = model2.fit(x_train, y_train,\n                         batch_size=8,\n                         epochs=25, \n                         verbose=1)\n    error = model2.evaluate(x_test, y_test)\n    print('MSE: {:.5f}'.format(error))\n    ```", "```py\n    predict_2 = model2.predict(x_test)\n    predict_2 = predict_2.reshape(predict_2.shape[0]) \n    print(x_test.shape)\n    plt.plot(range(len(x_test)),predict_2, '--r')\n    plt.plot(range(len(y_test)), y_test)\n    plt.show()\n    ```", "```py\n    corpus = [\n         'My cat is white',\n         'I am the major of this city',\n         'I love eating toasted cheese',\n         'The lazy cat is sleeping',\n    ]\n    ```", "```py\n    import spacy\n    import en_core_web_sm\n    nlp = en_core_web_sm.load()\n\n    corpus_tokens = []\n    for c in corpus:\n        doc = nlp(c)\n        tokens = []\n        for t in doc:\n            tokens.append(t.text)\n        corpus_tokens.append(tokens)\n    corpus_tokens\n    ```", "```py\n    processed_corpus = [t for sentence in corpus_tokens for t in sentence]\n    processed_corpus = set(processed_corpus)\n    processed_corpus\n    ```", "```py\n    word2int = dict([(tok, pos) for pos, tok in enumerate(processed_corpus)])\n    word2int\n    ```", "```py\n    Import numpy as np\n    sentence = 'My cat is lazy'\n    tokenized_sentence = sentence.split()\n    encoded_sentence = np.zeros([len(tokenized_sentence),len(processed_corpus)])\n    encoded_sentence\n    for i,c in enumerate(sentence.split()):\n        encoded_sentence[i][ word2int[c] ] = 1\n    encoded_sentence\n    ```", "```py\n    print(\"Shape of the encoded sentence:\", encoded_sentence.shape)\n    ```", "```py\n    from sklearn.preprocessing import LabelEncoder\n    from sklearn.preprocessing import OneHotEncoder\n    Declare the LabelEncoder() class.\n    le = LabelEncoder()\n    Encode the corpus with this class.\n    labeled_corpus = le.fit_transform(list(processed_corpus))\n    labeled_corpus\n    ```", "```py\n    sentence = 'My cat is lazy'\n    tokenized_sentence = sentence.split()\n    integer_encoded = le.transform(tokenized_sentence)\n    integer_encoded\n    ```", "```py\n    le.inverse_transform(integer_encoded)\n    ```", "```py\n    onehot_encoder = OneHotEncoder(sparse=False)\n    ```", "```py\n    labeled_corpus = labeled_corpus.reshape(len(labeled_corpus), 1)\n    onehot_encoded = onehot_encoder.fit(labeled_corpus)\n    ```", "```py\n    sentence_encoded = onehot_encoded.transform(integer_encoded.reshape(len(integer_encoded), 1))\n    print(sentence_encoded)\n    ```"]