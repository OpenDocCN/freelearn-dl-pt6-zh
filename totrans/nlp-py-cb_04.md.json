["```py\nimport re\n```", "```py\ndef text_match(text, patterns):\n```", "```py\nif re.search(patterns,  text):\n  return 'Found a match!'\nelse:\n  return('Not matched!')\n```", "```py\n    print(text_match(\"ac\", \"ab?\"))\n    print(text_match(\"abc\", \"ab?\"))\n    print(text_match(\"abbc\", \"ab?\"))\n```", "```py\nFound a match!\nFound a match!\nFound a match!\n```", "```py\nprint(text_match(\"ac\", \"ab*\"))\nprint(text_match(\"abc\", \"ab*\"))\nprint(text_match(\"abbc\", \"ab*\"))\n```", "```py\nFound a match!\nFound a match!\nFound a match!\n```", "```py\nprint(text_match(\"ac\", \"ab+\"))\nprint(text_match(\"abc\", \"ab+\"))\nprint(text_match(\"abbc\", \"ab+\"))\n```", "```py\nNot matched!\nFound a match!\nFound a match!\n```", "```py\nprint(text_match(\"abbc\", \"ab{2}\"))\n```", "```py\nprint(text_match(\"aabbbbc\", \"ab{3,5}?\"))\n```", "```py\nimport re\n```", "```py\ndef text_match(text, patterns):\n  if re.search(patterns,  text):\n    return 'Found a match!'\n  else:\n    return('Not matched!')\n```", "```py\nprint(\"Pattern to test starts and ends with\")\nprint(text_match(\"abbc\", \"^a.*c$\"))\n```", "```py\nPattern to test starts and ends with\n\nFound a match!\n```", "```py\nprint(\"Begin with a word\")\nprint(text_match(\"Tuffy eats pie, Loki eats peas!\", \"^\\w+\"))\n```", "```py\nBegin with a word\n\nFound a match!\n```", "```py\nprint(\"End with a word and optional punctuation\")\nprint(text_match(\"Tuffy eats pie, Loki eats peas!\", \"\\w+\\S*?$\"))\n```", "```py\nEnd with a word and optional punctuation\n\nFound a match!\n```", "```py\nprint(\"Finding a word which contains character, not start or end of the word\")\nprint(text_match(\"Tuffy eats pie, Loki eats peas!\", \"\\Bu\\B\"))\n```", "```py\nFinding a word which contains character, not start or end of the word\n\nFound a match!\n```", "```py\nPattern to test starts and ends with\n\nFound a match!\n\nBegin with a word\n\nFound a match!\n\nEnd with a word and optional punctuation\n\nFound a match!\n\nFinding a word which contains character, not start or end of the word\n\nFound a match!\n```", "```py\nimport re\n```", "```py\npatterns = [ 'Tuffy', 'Pie', 'Loki' ]\ntext = 'Tuffy eats pie, Loki eats peas!'\n```", "```py\nfor pattern in patterns:\n  print('Searching for \"%s\" in \"%s\" -&gt;' % (pattern, text),)\n  if re.search(pattern,  text):\n    print('Found!')\n  else:\n    print('Not Found!')\n```", "```py\ntext = 'Diwali is a festival of lights, Holi is a festival of colors!'\npattern = 'festival'\n```", "```py\nfor match in re.finditer(pattern, text):\n  s = match.start()\n  e = match.end()\n  print('Found \"%s\" at %d:%d' % (text[s:e], s, e))\n```", "```py\nFound \"festival\" at 12:20\n\nFound \"festival\" at 42:50\n```", "```py\nSearching for \"Tuffy\" in \"Tuffy eats pie, Loki eats peas!\" -&gt;\n\nFound!\n\nSearching for \"Pie\" in \"Tuffy eats pie, Loki eats peas!\" -&gt;\n\nNot Found!\n\nSearching for \"Loki\" in \"Tuffy eats pie, Loki eats peas!\" -&gt;\n\nFound!\n\nFound \"festival\" at 12:20\n\nFound \"festival\" at 42:50\n```", "```py\nimport re\n```", "```py\nurl= \"http://www.telegraph.co.uk/formula-1/2017/10/28/mexican-grand-prix-2017-time-does-start-tv-channel-odds-lewis1/\"\n\ndate_regex = '/(\\d{4})/(\\d{1,2})/(\\d{1,2})/'\n```", "```py\nprint(\"Date found in the URL :\", re.findall(date_regex, url))\n```", "```py\nDate found in the URL : [('2017', '10', '28')]\n```", "```py\ndef is_allowed_specific_char(string):\n  charRe = re.compile(r'[^a-zA-Z0-9.]')\n  string = charRe.search(string)\n  return not bool(string)\n```", "```py\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450.\"))\nprint(is_allowed_specific_char(\"*&%@#!}{\"))\n```", "```py\nTrue\n\nFalse\n```", "```py\nDate found in the URL : [('2017', '10', '28')]\n\nTrue\n\nFalse\n```", "```py\nimport re\n```", "```py\nstreet = '21 Ramkrishna Road'\nprint(re.sub('Road', 'Rd', street))\n```", "```py\n21 Ramkrishna Rd\n```", "```py\ntext = 'Diwali is a festival of light, Holi is a festival of color!'\nprint(re.findall(r\"\\b\\w{5}\\b\", text))\n```", "```py\n['light', 'color']\n```", "```py\n21 Ramkrishna Rd\n\n['light', 'color']\n```", "```py\nimport re\n```", "```py\nraw = \"I am big! It's the pictures that got small.\"\n\nprint(re.split(r' +', raw))\n```", "```py\n['I', 'am', 'big!', \"It's\", 'the', 'pictures', 'that', 'got', 'small.']\n```", "```py\nprint(re.split(r'\\W+', raw))\n```", "```py\n['I', 'am', 'big', 'It', 's', 'the', 'pictures', 'that', 'got', 'small', '']\n```", "```py\nprint(re.findall(r'\\w+|\\S\\w*', raw))\n```", "```py\n['I', 'am', 'big', '!', 'It', \"'s\", 'the', 'pictures', 'that', 'got', 'small', '.']\n```", "```py\n['I', 'am', 'big!', \"It's\", 'the', 'pictures', 'that', 'got', 'small.']\n\n['I', 'am', 'big', 'It', 's', 'the', 'pictures', 'that', 'got', 'small', '']\n\n['I', 'am', 'big', '!', 'It', \"'s\", 'the', 'pictures', 'that', 'got', 'small', '.']\n```", "```py\nimport re\n```", "```py\ndef stem(word):\n```", "```py\nsplits = re.findall(r'^(.*?)(ing|ly|ed|ious|ies|ive|es|s|ment)?$', word)\nstem = splits[0][0]\nreturn stem\n```", "```py\nraw = \"Keep your friends close, but your enemies closer.\"\ntokens = re.findall(r'\\w+|\\S\\w*', raw)\nprint(tokens)\n```", "```py\n['Keep', 'your', 'friends', 'close', ',', 'but', 'your', 'enemies', 'closer', '.']\n```", "```py\nfor t in tokens:\n  print(\"'\"+stem(t)+\"'\")\n```", "```py\n['Keep', 'your', 'friends', 'close', ',', 'but', 'your', 'enemies', 'closer', '.']\n\n'Keep'\n\n'your'\n\n'friend'\n\n'close'\n\n','\n\n'but'\n\n'your'\n\n'enem'\n\n'closer'\n\n'.'\n```"]