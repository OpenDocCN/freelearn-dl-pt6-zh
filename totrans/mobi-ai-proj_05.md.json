["```py\n$ pip install tensorflow\n$ pip install tensorflow-hub\n```", "```py\nmkdir -/Chapter5/images\ncd -/Chapter5/images\ncurl -LO https://github.com/tensorflow/hub/raw/master/examples/image_retraining/ retrain.py\npython retrain.py --image_dir ./images/\n```", "```py\n--how_many_training_steps = 4000\n```", "```py\n--architecture=\" mobilenet_v2_1.4_224\"\n```", "```py\n--random_crop\n--random_scale\n--random_brightness\n```", "```py\nimport argparse\nimport json\nimport itertools\nimport logging\nimport re\nimport os\nimport uuid\nimport sys\nfrom urllib.request import urlopen, Request\nfrom bs4 import BeautifulSoup\n#logger will be useful for your debugging need\ndef configure_logging():\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler()\nhandler.setFormatter(\nlogging.Formatter('[%(asctime)s %(levelname)s %(module)s]: %(message)s'))\nlogger.addHandler(handler)\nreturn logger\nlogger = configure_logging()\n```", "```py\n\nREQUEST_HEADER = {\n'User-Agent': \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36\"}\ndef get_soup(url, header):\nresponse = urlopen(Request(url, headers=header))\nreturn BeautifulSoup(response, 'html.parser')\n# initialize place for links\ndef get_query_url(query):\nreturn \"https://www.google.co.in/search?q=%s&source=lnms&tbm=isch\" % query\n# pull out specific data through navigating into source data tree\ndef extract_images_from_soup(soup):\nimage_elements = soup.find_all(\"div\", {\"class\": \"rg_meta\"})\nmetadata_dicts = (json.loads(e.text) for e in image_elements)\nlink_type_records = ((d[\"ou\"], d[\"ity\"]) for d in metadata_dicts)\nreturn link_type_records\n```", "```py\n\ndef extract_images(query, num_images):\nurl = get_query_url(query)\nlogger.info(\"Souping\")\nsoup = get_soup(url, REQUEST_HEADER)\nlogger.info(\"Extracting image urls\")\nlink_type_records = extract_images_from_soup(soup)\nreturn itertools.islice(link_type_records, num_images)\ndef get_raw_image(url):\nreq = Request(url, headers=REQUEST_HEADER)\nresp = urlopen(req)\nreturn resp.read()\n```", "```py\ndef save_image(raw_image, image_type, save_directory):\nextension = image_type if image_type else 'jpg'\nfile_name = str(uuid.uuid4().hex) + \".\" + extension\nsave_path = os.path.join(save_directory, file_name)\nwith open(save_path, 'wb+') as image_file:\nimage_file.write(raw_image)\ndef download_images_to_dir(images, save_directory, num_images):\nfor i, (url, image_type) in enumerate(images):\ntry:\nlogger.info(\"Making request (%d/%d): %s\", i, num_images, url)\nraw_image = get_raw_image(url)\nsave_image(raw_image, image_type, save_directory)\nexcept Exception as e:\nlogger.exception(e)\ndef run(query, save_directory, num_images=100):\nquery = '+'.join(query.split())\nlogger.info(\"Extracting image links\")\nimages = extract_images(query, num_images)\nlogger.info(\"Downloading images\")\ndownload_images_to_dir(images, save_directory, num_images)\nlogger.info(\"Finished\")\n#main method to initiate the scrapper\ndef main():\nparser = argparse.ArgumentParser(description='Scrape Google images')\n#change the search term here\nparser.add_argument('-s', '--search', default='apple', type=str, help='search term')\n```", "```py\nparser.add_argument('-n', '--num_images', default=1, type=int, help='num images to save')\n#change path according to your need\nparser.add_argument('-d', '--directory', default='/Users/karthikeyan/Downloads/', type=str, help='save directory')\nargs = parser.parse_args()\nrun(args.search, args.directory, args.num_images)\nif __name__ == '__main__':\nmain()\n```", "```py\npython imageScrapper.py --search \"alien\" --num_images 10 --directory \"/Users/Karthikeyan/Downloads\"\n```", "```py\n$ git clone https://github.com/hardikvasa/google-images-download.git\n$ cd google-images-download && sudo python setup.py install\n```", "```py\n$ pip install google_images_download\n```", "```py\n$ googleimagesdownload [Arguments...]\n```", "```py\n$ python3 google_images_download.py [Arguments...] \n$ python google_images_download.py [Arguments...]\n```", "```py\nfrom google_images_download import google_images_download\nresponse = google_images_download.googleimagesdownload()\n absolute_image_paths = response.download({<Arguments...>})\n```", "```py\n{\n \"Records\": [\n {\n \"keywords\": \"apple\",\n \"limit\": 55,\n \"color\": \"red\",\n \"print_urls\": true\n },\n {\n \"keywords\": \"oranges\",\n \"limit\": 105,\n \"size\": \"large\",\n \"print_urls\": true\n }\n ]\n }\n```", "```py\n_images_download import google_images_download \n\n#importing the library\n\nresponse = google_images_download.googleimagesdownload() \n\n#class instantiation\n\narguments = {\"keywords\":\"apple, beach, cat\",\"limit\":30,\"print_urls\":True} #creating list of arguments\npaths = response.download(arguments) #passing the arguments to the function\nprint(paths)\n\n#printing absolute paths of the downloaded images\n```", "```py\n$ googleimagesdownload -cf example.json\n```", "```py\n$ googleimagesdownload --keywords \"apple, beach, cat\" --limit 20\n```", "```py\n$ googleimagesdownload --k \"car\" -sk 'yellow,blue,green' -l 10\n```", "```py\n$ googleimagesdownload -k \"apple, beach, cat\" -l 20\n```", "```py\n$ googleimagesdownload --keywords \"logo\" --format svg\n```", "```py\n$ googleimagesdownload -k \"playground\" -l 20 -co red\n```", "```py\n$ googleimagesdownload -k \"![](img/5a19f409-e391-4710-bbeb-9b051bbcb914.png)\" -l 5\n```", "```py\n$ googleimagesdownload -k \"sample\" -u <google images page URL>\n```", "```py\n$ googleimagesdownload -k \"boat\" -o \"boat_new\"\n```", "```py\n$ googleimagesdownload --keywords \"baloons\" --single_image <URL of the images>\n```", "```py\n$ googleimagesdownload --keywords \"baloons\" --size medium --type animated\n```", "```py\n$ googleimagesdownload --keywords \"universe\" --usage_rights labeled-for-reuse\n```", "```py\n$ googleimagesdownload --keywords \"flowers\" --color_type black-and-white\n```", "```py\n$ googleimagesdownload --keywords \"universe\" --aspect_ratio panoramic\n```", "```py\n$ googleimagesdownload -si <image url> -l 10\n```", "```py\n$ googleimagesdownload --keywords \"universe\" --specific_site google.com\n```", "```py\ngoogleimagesdownload -k \"heavily damaged car\" -sk 'red,blue,white,black,green,brown,pink,yellow' -l 500\n```", "```py\ngoogleimagesdownload -k \"car dent\" -sk 'red,blue,white,black,green,brown,pink,yellow' -l 500\n```", "```py\ngoogleimagesdownload -k \"car\" -l 500\n```", "```py\ngoogleimagesdownload -k \"bike,flight,home,road,tv\" -l 500\n```", "```py\npython retrain.py \\\n--bottleneck_dir=./ \\\n--how_many_training_steps=4000 \\\n--model_dir=./ \\\n--output_graph=./retrained_graph.pb \\\n--output_labels=retrained_labels.txt \\\n--architecture=\" mobilenet_v2_1.4_224\" \\\n--image_dir=/Users/karthikeyan/Documents/ /book/Chapter5/images\n```", "```py\nimport os\nimport glob\nfrom classify import prediction\nimport tensorflow as tf\nimport thread\nimport time\nfrom flask import Flask, render_template, request, redirect, url_for, send_from_directory,flash\nfrom werkzeug import secure_filename\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'uploads/'\napp.config['ALLOWED_EXTENSIONS'] = set(['jpg', 'jpeg'])\napp.config['SECRET_KEY'] = '7d441f27d441f27567d441f2b6176a'\ndef allowed_file(filename):\nreturn '.' in filename and \\\nfilename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS']\n@app.route('/')\ndef index():\nreturn render_template('index.html')\n@app.route('/upload', methods=['POST'])\ndef upload():\nfile = request.files['file']\nif file and allowed_file(file.filename):\nfilename = secure_filename(file.filename)\nfilename = str(len(os.listdir(app.config['UPLOAD_FOLDER']))+1)+'.jpg'\nfile_name_full_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\nfile.save(file_name_full_path)\nreturn render_template('upload_success.html')\n@app.route('/uploads/<filename>')\ndef uploaded_file(filename):\nreturn send_from_directory(app.config['UPLOAD_FOLDER'],\nfilename)\n@app.route('/claim', methods=['POST'])\ndef predict():\nlist_of_files = glob.glob('/Users/karthikeyan/Documents/code/play/acko/cardamage/Car-Damage-Detector/uploads/*.jpg') # * means all if need specific format then *.csv\nlatest_file = max(list_of_files, key=os.path.getctime)\nprint(latest_file)\nimage_path = latest_file\n```", "```py\n#print(max(glob.glob(r'uploads\\*.jpg'), key=os.path.getmtime))\nwith tf.Graph().as_default():\nhuman_string, score= prediction(image_path)\nprint('model one value' + str(human_string))\nprint('model one value' + str(score))\nif (human_string == 'car'):\nlabel_text = 'This is not a damaged car with confidence ' + str(score) + '%. Please upload a damaged car image'\nprint(image_path)\nreturn render_template('front.html', text = label_text, filename=\"http://localhost:5000/uploads/\"+os.path.basename(image_path))\nelif (human_string == 'low'):\nlabel_text = 'This is a low damaged car with '+ str(score) + '% confidence.'\nprint(image_path)\n```", "```py\n\nreturn render_template('front.html', text = label_text, filename=\"http://localhost:5000/uploads/\"+os.path.basename(image_path))\nelif (human_string == 'high'):\nlabel_text = 'This is a high damaged car with '+ str(score) + '% confidence.'\nprint(image_path)\nreturn render_template('front.html', text = label_text, filename=\"http://localhost:5000/uploads/\"+os.path.basename(image_path))\nelif (human_string == 'not'):\nlabel_text = 'This is not the image of a car with confidence ' + str(score) + '%. Please upload the car image.'\nprint(image_path)\nreturn render_template('front.html', text = label_text, filename=\"http://localhost:5000/uploads/\"+os.path.basename(image_path))\ndef cleanDirectory(threadName,delay):\n```", "```py\nwhile True:\ntime.sleep(delay)\nprint (\"Cleaning Up Directory\")\nfilelist = [ f for f in (os.listdir(app.config['UPLOAD_FOLDER'])) ]\nfor f in filelist:\n#os.remove(\"Uploads/\"+f)\nos.remove(os.path.join(app.config['UPLOAD_FOLDER'], f))\nif __name__ == '__main__':\ntry:\n_thread.start_new_thread( cleanDirectory, (\"Cleaning Thread\", 99999999, ) )\nexcept:\nprint(\"Error: unable to start thread\" )\napp.run()\nClassify.py does the model classification using TensorFlow.\nimport tensorflow as tf\nimport sys\nimport os\nimport urllib\n```", "```py\nos.environ['TF_CPP_MIN_LOG_LEVEL']='2'\nimport tensorflow as tf\ndef prediction(image_path):\nimage_data = tf.gfile.FastGFile(image_path, 'rb').read()\nprint(image_path)\nlabel_lines = [line.rstrip() for line\nin tf.gfile.GFile(r\"./models/tf_files/retrained_labels.txt\")]\nwith tf.gfile.FastGFile(r\"./models/tf_files/retrained_graph.pb\", 'rb') as f:\ngraph_def = tf.GraphDef()\ngraph_def.ParseFromString(f.read())\n_ = tf.import_graph_def(graph_def, name='')\nwith tf.Session() as sess:\n```", "```py\nsoftmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\npredictions = sess.run(softmax_tensor, \\\n{'DecodeJpeg/contents:0': image_data})\ntop_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\nfor node_id in top_k:\ncount = 1\nhuman_string = label_lines[node_id]\nscore = predictions[0][node_id]\nprint(count)\ncount += 1\nprint('%s (score = %.5f)' % (human_string, score))\nscore = (round((score * 100), 2))\nreturn human_string,score\n```", "```py\n <!DOCTYPE html>\n <html lang=\"en\">\n <head>\n <meta charset=\"utf-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n <meta name=\"description\" content=\"\">\n <meta name=\"author\" content=\"Karthikeyan NG\">\n <title>Damage Estimator</title>\n <!-- Bootstrap core CSS -->\n <link href=\"{{ url_for('static', filename='vendor/bootstrap/css/bootstrap.min.css') }}\" rel=\"stylesheet\"/>\n <!-- Custom fonts for this template -->\n <link href=\"{{ url_for('static', filename='vendor/font-awesome/css/font-awesome.min.css') }}\" rel=\"stylesheet\" type=\"text/css\"/>\n <link href='https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/css'>\n <link href='https://fonts.googleapis.com/css?family=Merriweather:400,300,300italic,400italic,700,700italic,900,900italic' rel='stylesheet' type='text/css'>\n <!-- Plugin CSS -->\n <link href=\"{{ url_for('static', filename='vendor/magnific-popup/magnific-popup.css') }}\" rel=\"stylesheet\" />\n <!-- Custom styles for this template -->\n <link href=\"{{ url_for('static', filename='css/creative.min.css') }}\" rel=\"stylesheet\" />\n </head>\n <body id=\"page-top\">\n <!-- Navigation -->\n <nav class=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n <a class=\"navbar-brand\" href=\"#page-top\">Damage Estimator</a>\n <button class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n <span class=\"navbar-toggler-icon\"></span>\n </button>\n <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n </div>\n </nav>\n <section class=\"bg-primary\" id=\"about\">\n <div class=\"container\">\n <div class=\"row\">\n <div class=\"col-lg-8 mx-auto text-center\">\n <h2 class=\"section-heading text-white\">Do you have a damaged vehicle?</h2>\n <hr class=\"light\">\n <p class=\"text-faded\">Machine Learning allows for a classification process that is automated and makes lesser error. Besides risk group classification, Deep Learning algorithms can be applied to images of vehicle damage, allowing for automated claim classification.</p>\n <br/>\n <div class=\"contr\"><h4 class=\"section-heading text-white\">Select the file (image) and Upload</h4></div>\n <br/>\n <form action=\"upload\" method=\"post\" enctype=\"multipart/form-data\">\n <div class=\"form-group\">\n <input type=\"file\" name=\"file\" class=\"file\">\n <div class=\"input-group col-xs-12\">\n <span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-picture\"></i></span>\n <input type=\"text\" class=\"form-control input-lg\" disabled placeholder=\"Upload Image\">\n <span class=\"input-group-btn\">\n <button class=\"browse btn btn-primary input-lg\" type=\"button\"><i class=\"glyphicon glyphicon-search\"></i> Browse</button>\n </span>\n </div>\n </div>\n <input type=\"submit\" class=\"btn btn-primary\" value=\"Upload\"><br /><br />\n </form>\n </div>\n </div>\n </section>\n```", "```py\n <!-- Bootstrap core JavaScript -->\n <script src=\"img/jquery.min.js') }}\"></script>\n <script src=\"img/popper.min.js') }}\"></script>\n <script src=\"img/bootstrap.min.js') }}\"></script>\n <!-- Plugin JavaScript -->\n <script src=\"img/jquery.easing.min.js') }}\"></script>\n <script src=\"img/scrollreveal.min.js') }}\"></script>\n <script src=\"img/jquery.magnific-popup.min.js') }}\"></script>\n <!-- Custom scripts for this template -->\n <script src=\"img/creative.min.js') }}\"></script>\n <script>\n $(document).on('click', '.browse', function(){\n var file = $(this).parent().parent().parent().find('.file');\n file.trigger('click');\n });\n $(document).on('change', '.file', function(){\n $(this).parent().find('.form-control').val($(this).val().replace(/C:\\\\fakepath\\\\/i, ''));\n });\n </script>\n </body>\n </html>\n```", "```py\n$ python app.py\n```"]