["```py\n<dependency>\n <groupId>org.bytedeco.javacpp-presets</groupId>\n <artifactId>opencv-platform</artifactId>\n <version>4.0.1-1.4.4</version>\n </dependency>\n```", "```py\nFileSplit fileSplit = new FileSplit(parentDir, NativeImageLoader.ALLOWED_FORMATS,new Random(42));\n int numLabels = fileSplit.getRootDir().listFiles(File::isDirectory).length;\n```", "```py\nParentPathLabelGenerator parentPathLabelGenerator = new ParentPathLabelGenerator();\n BalancedPathFilter balancedPathFilter = new BalancedPathFilter(new Random(42),NativeImageLoader.ALLOWED_FORMATS,parentPathLabelGenerator);\n InputSplit[] inputSplits = fileSplit.sample(balancedPathFilter,trainSetRatio,testSetRatio);\n\n```", "```py\nint numLabels = fileSplit.getRootDir().listFiles(File::isDirectory).length; \n```", "```py\nImageTransform flipTransform = new FlipImageTransform(new Random(seed));\n```", "```py\nImageTransform warpTransform = new WarpImageTransform(new Random(seed),delta);\n```", "```py\nImageTransform rotateTransform = new RotateImageTransform(new Random(seed), angle);\n```", "```py\nList<Pair<ImageTransform,Double>> pipeline = Arrays.asList(\n new Pair<>(flipTransform, flipImageTransformRatio),\n new Pair<>(warpTransform , warpImageTransformRatio)\n );\n ImageTransform transform = new PipelineImageTransform(pipeline);\n\n```", "```py\nint flipMode = 0;\nImageTransform flipTransform = new FlipImageTransform(flipMode);\n```", "```py\npublic WarpImageTransform(java.util.Random random,\n float dx1,\n float dy1,\n float dx2,\n float dy2,\n float dx3,\n float dy3,\n float dx4,\n float dy4\n```", "```py\nDataNormalization scaler = new ImagePreProcessingScaler(0,1);\n\n```", "```py\nMultiLayerConfiguration.Builder builder = new NeuralNetConfiguration.Builder().weightInit(WeightInit.DISTRIBUTION)\n .dist(new NormalDistribution(0.0, 0.01))\n .activation(Activation.RELU)\n .updater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 1e-2, 0.1, 100000), 0.9))\n .biasUpdater(new Nesterovs(new StepSchedule(ScheduleType.ITERATION, 2e-2, 0.1, 100000), 0.9))\n .gradientNormalization(GradientNormalization.RenormalizeL2PerLayer) // normalize to prevent vanishing or exploding gradients\n .l2(l2RegularizationParam)\n .list();\n```", "```py\nbuilder.layer(new ConvolutionLayer.Builder(11,11)\n .nIn(channels)\n .nOut(96)\n .stride(1,1)\n .activation(Activation.RELU)\n .build());\n```", "```py\nbuilder.layer(new SubsamplingLayer.Builder(PoolingType.MAX)\n .kernelSize(kernelSize,kernelSize)\n .build());\n```", "```py\n builder.layer(1, new LocalResponseNormalization.Builder().name(\"lrn1\").build());\n```", "```py\nnew DenseLayer.Builder()\n .nOut(nOut)\n .dist(new NormalDistribution(0.001, 0.005))\n .activation(Activation.RELU)\n .build();\n```", "```py\nbuilder.layer(new DenseLayer.Builder()\n .nOut(500)\n .dist(new NormalDistribution(0.001, 0.005))\n .activation(Activation.RELU)\n .build());\n```", "```py\nbuilder.layer(new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\n .nOut(numLabels)\n .activation(Activation.SOFTMAX)\n .build());\n```", "```py\nbuilder.setInputType(InputType.convolutional(30,30,3));\n\n```", "```py\nImageRecordReader imageRecordReader = new ImageRecordReader(imageHeight,imageWidth,channels,parentPathLabelGenerator);\n imageRecordReader.initialize(trainData,null);\n```", "```py\nDataSetIterator dataSetIterator = new RecordReaderDataSetIterator(imageRecordReader,batchSize,1,numLabels);\n```", "```py\nDataNormalization scaler = new ImagePreProcessingScaler(0,1);\n scaler.fit(dataSetIterator);\n dataSetIterator.setPreProcessor(scaler);\n\n```", "```py\nMultiLayerConfiguration config = builder.build();\n MultiLayerNetwork model = new MultiLayerNetwork(config);\n model.init();\n model.setListeners(new ScoreIterationListener(100));\n model.fit(dataSetIterator,epochs);\n```", "```py\nimageRecordReader.initialize(trainData,transform);\n dataSetIterator = new RecordReaderDataSetIterator(imageRecordReader,batchSize,1,numLabels);\n scaler.fit(dataSetIterator);\n dataSetIterator.setPreProcessor(scaler);\n model.fit(dataSetIterator,epochs);\n```", "```py\nEvaluation evaluation = model.evaluate(dataSetIterator);\n System.out.println(evaluation.stats()); \n\n```", "```py\n<dependency>\n  <groupId>org.nd4j</groupId>\n  <artifactId>nd4j-cuda-9.1-platform</artifactId>\n  <version>1.0.0-beta3</version>\n </dependency>\n\n <dependency>\n  <groupId>org.deeplearning4j</groupId>\n  <artifactId>deeplearning4j-cuda-9.1</artifactId>\n  <version>1.0.0-beta3</version>\n </dependency>\n```", "```py\nFile file = new File(\"cnntrainedmodel.zip\");\n ModelSerializer.writeModel(model,file,true);\n ModelSerializer.addNormalizerToModel(file,scaler);\n```", "```py\nMultiLayerNetwork network = ModelSerializer.restoreMultiLayerNetwork(modelFile);\n NormalizerStandardize normalizerStandardize = ModelSerializer.restoreNormalizerFromFile(modelFile);\n```", "```py\npublic static INDArray generateOutput(File file) throws IOException, InterruptedException {\n final File modelFile = new File(\"cnnmodel.zip\");\n final MultiLayerNetwork model = ModelSerializer.restoreMultiLayerNetwork(modelFile);\n final RecordReader imageRecordReader = generateReader(file);\n final NormalizerStandardize normalizerStandardize = ModelSerializer.restoreNormalizerFromFile(modelFile);\n final DataSetIterator dataSetIterator = new RecordReaderDataSetIterator.Builder(imageRecordReader,1).build();\n normalizerStandardize.fit(dataSetIterator);\n dataSetIterator.setPreProcessor(normalizerStandardize);\n return model.output(dataSetIterator);\n }\n\n```", "```py\n@GetMapping(\"/\")\n public String main(final Model model){\n model.addAttribute(\"message\", \"Welcome to Java deep learning!\");\n return \"welcome\";\n }\n\n @PostMapping(\"/\")\n public String fileUpload(final Model model, final @RequestParam(\"uploadFile\")MultipartFile multipartFile) throws IOException, InterruptedException {\n final List<String> results = cookBookService.generateStringOutput(multipartFile);\n model.addAttribute(\"message\", \"Welcome to Java deep learning!\");\n model.addAttribute(\"results\",results);\n return \"welcome\";\n }\n```", "```py\n<dependency>\n <groupId>com.javadeeplearningcookbook.app</groupId>\n <artifactId>cookbookapp-cnn</artifactId>\n <version>1.0-SNAPSHOT</version>\n </dependency>\n```", "```py\n@Override\n public List<String> generateStringOutput(MultipartFile multipartFile) throws IOException, InterruptedException {\n //TODO: MultiPartFile to File conversion (multipartFile -> convFile)\n INDArray indArray = ImageClassifierAPI.generateOutput(convFile);\n\n for(int i=0; i<indArray.rows();i++){\n           for(int j=0;j<indArray.columns();j++){\n                   DecimalFormat df2 = new DecimalFormat(\"#.####\");\n                   results.add(df2.format(indArray.getDouble(i,j)*100)+\"%\"); \n                //Later add them from list to the model display on UI.\n            }            \n        }\n  convFile.deleteOnExit();\n   return results;\n }\n\n```", "```py\ngcloud components install app-engine-java\n```", "```py\ngcloud init\n```", "```py\n<plugin>\n <groupId>com.google.cloud.tools</groupId>\n <artifactId>appengine-maven-plugin</artifactId>\n <version>2.1.0</version>\n </plugin>\n```", "```py\nmvn clean install\n```", "```py\nmvn appengine:deploy\n```"]