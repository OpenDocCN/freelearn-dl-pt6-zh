["```py\n# AI for Sales & Advertizing - Sell like the Wolf of AI Street\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport random \n```", "```py\n# Setting the parameters\nN = 10000\nd = 9 \n```", "```py\n# Building the environment inside a simulation\nconversion_rates = [0.05,0.13,0.09,0.16,0.11,0.04,0.20,0.08,0.01]\nX = np.array(np.zeros([N,d]))\nfor i in range(N):\n    for j in range(d):\n        if np.random.rand() <= conversion_rates[j]:\n            X[i,j] = 1 \n```", "```py\n# Implementing Random Selection and Thompson Sampling\nstrategies_selected_rs = []\nstrategies_selected_ts = []\ntotal_reward_rs = 0\ntotal_reward_ts = 0\nnumbers_of_rewards_1 = [0] * d\nnumbers_of_rewards_0 = [0] * d \n```", "```py\nfor n in range(0, N):\n    # Random Selection\n    strategy_rs = random.randrange(d)\n    strategies_selected_rs.append(strategy_rs)\n    reward_rs = X[n, strategy_rs]\n    total_reward_rs = total_reward_rs + reward_rs \n```", "```py\n # Thompson Sampling\n    strategy_ts = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1) \n```", "```py\n # Thompson Sampling\n    strategy_ts = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta\n            strategy_ts = i\n    reward_ts = X[n, strategy_ts] \n```", "```py\n # Thompson Sampling\n    strategy_ts = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta\n            strategy_ts = i\n    reward_ts = X[n, strategy_ts]\n    if reward_ts == 1:\n        numbers_of_rewards_1[strategy_ts] = numbers_of_rewards_1[strategy_ts] + 1\n    else:\n        numbers_of_rewards_0[strategy_ts] = numbers_of_rewards_0[strategy_ts] + 1 \n```", "```py\n # Thompson Sampling\n    strategy_ts = 0\n    max_random = 0\n    for i in range(0, d):\n        random_beta = random.betavariate(numbers_of_rewards_1[i] + 1, numbers_of_rewards_0[i] + 1)\n        if random_beta > max_random:\n            max_random = random_beta\n            strategy_ts = i\n    reward_ts = X[n, strategy_ts]\n    if reward_ts == 1:\n        numbers_of_rewards_1[strategy_ts] = numbers_of_rewards_1[strategy_ts] + 1\n    else:\n        numbers_of_rewards_0[strategy_ts] = numbers_of_rewards_0[strategy_ts] + 1\n    strategies_selected_ts.append(strategy_ts)\n    total_reward_ts = total_reward_ts + reward_ts \n```", "```py\n# Computing the Relative Return\nrelative_return = (total_reward_ts - total_reward_rs) / total_reward_rs * 100\nprint(\"Relative Return: {:.0f} %\".format(relative_return)) \n```", "```py\n# Plotting the Histogram of Selections\nplt.hist(strategies_selected_ts)\nplt.title('Histogram of Selections')\nplt.xlabel('Strategy')\nplt.ylabel('Number of times the strategy was selected')\nplt.show() \n```"]