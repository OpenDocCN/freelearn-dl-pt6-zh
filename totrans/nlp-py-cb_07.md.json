["```py\nimport nltk\n```", "```py\ndef sampleNE():\n  sent = nltk.corpus.treebank.tagged_sents()[0]\n  print(nltk.ne_chunk(sent))\n```", "```py\ndef sampleNE2():\n  sent = nltk.corpus.treebank.tagged_sents()[0]\n  print(nltk.ne_chunk(sent, binary=True))\n```", "```py\nif __name__ == '__main__':\n  sampleNE()\n  sampleNE2()\n```", "```py\nAll the flights got delayed due to bad weather\n```", "```py\nflights -> Noun\nWeather -> Noun\n```", "```py\nimport nltk\n```", "```py\nclass LearningDictionary():\n```", "```py\ndef __init__(self, sentence):\n```", "```py\nself.words = nltk.word_tokenize(sentence)\n```", "```py\nself.tagged = nltk.pos_tag(self.words)\n```", "```py\nself.buildDictionary()\n```", "```py\n self.buildReverseDictionary()\n```", "```py\n def buildDictionary(self):\n```", "```py\nself.dictionary = {}\nfor (word, pos) in self.tagged:\n  self.dictionary[word] = pos\n```", "```py\ndef buildReverseDictionary(self):\n```", "```py\nself.rdictionary = {}\n```", "```py\n for key in self.dictionary.keys():\n```", "```py\nvalue = self.dictionary[key]\n```", "```py\nif value not in self.rdictionary:\n  self.rdictionary[value] = [key]\nelse:\n  self.rdictionary[value].append(key)\n```", "```py\ndef isWordPresent(self, word):\n  return 'Yes' if word in self.dictionary else 'No'\n```", "```py\ndef getPOSForWord(self, word):\n  return self.dictionary[word] if word in self.dictionary else None\n```", "```py\ndef getWordsForPOS(self, pos):\n  return self.rdictionary[pos] if pos in self.rdictionary else None\n```", "```py\nsentence = \"All the flights got delayed due to bad weather\"\n```", "```py\nlearning = LearningDictionary(sentence)\n```", "```py\nwords = [\"chair\", \"flights\", \"delayed\", \"pencil\", \"weather\"]\n```", "```py\npos = [\"NN\", \"VBS\", \"NNS\"]\n```", "```py\nfor word in words:\n  status = learning.isWordPresent(word)\n  print(\"Is '{}' present in dictionary ? : '{}'\".format(word, status))\n  if status is True:\n    print(\"\\tPOS For '{}' is '{}'\".format(word, learning.getPOSForWord(word)))\n```", "```py\nfor pword in pos:\n  print(\"POS '{}' has '{}' words\".format(pword, learning.getWordsForPOS(pword)))\n```", "```py\nimport nltk\nimport random\n```", "```py\nsampledata = [\n  ('KA-01-F 1034 A', 'rtc'),\n  ('KA-02-F 1030 B', 'rtc'),\n  ('KA-03-FA 1200 C', 'rtc'),\n  ('KA-01-G 0001 A', 'gov'),\n  ('KA-02-G 1004 A', 'gov'),\n  ('KA-03-G 0204 A', 'gov'),\n  ('KA-04-G 9230 A', 'gov'),\n  ('KA-27 1290', 'oth')\n]\n```", "```py\nrandom.shuffle(sampledata)\n```", "```py\ntestdata = [\n  'KA-01-G 0109',\n  'KA-02-F 9020 AC',\n  'KA-02-FA 0801',\n  'KA-01 9129'\n]\n```", "```py\ndef learnSimpleFeatures():\n```", "```py\ndef vehicleNumberFeature(vnumber):\n  return {'vehicle_class': vnumber[6]}\n```", "```py\nfeaturesets = [(vehicleNumberFeature(vn), cls) for (vn, cls) in sampledata]\n```", "```py\nclassifier = nltk.NaiveBayesClassifier.train(featuresets)\n```", "```py\nfor num in testdata:\n  feature = vehicleNumberFeature(num)\n  print(\"(simple) %s is of type %s\" %(num, classifier.classify(feature)))\n```", "```py\ndef learnFeatures():\n```", "```py\ndef vehicleNumberFeature(vnumber):\n  return {\n    'vehicle_class': vnumber[6],\n    'vehicle_prev': vnumber[5]\n  }\n```", "```py\nfeaturesets = [(vehicleNumberFeature(vn), cls) for (vn, cls) in sampledata]\n```", "```py\nclassifier = nltk.NaiveBayesClassifier.train(featuresets)\n```", "```py\nfor num in testdata:\n  feature = vehicleNumberFeature(num)\n  print(\"(dual) %s is of type %s\" %(num, classifier.classify(feature)))\n```", "```py\nlearnSimpleFeatures()\nlearnFeatures()\n```", "```py\nimport nltk\n```", "```py\ndef featureExtractor(words, i):\n    return ({'current-word': words[i], 'next-is-upper': words[i+1][0].isupper()}, words[i+1][0].isupper())\n```", "```py\ndef getFeaturesets(sentence):\n  words = nltk.word_tokenize(sentence)\n  featuresets = [featureExtractor(words, i) for i in range(1, len(words) - 1) if words[i] == '.']\n  return featuresets\n```", "```py\ndef segmentTextAndPrintSentences(data):\n  words = nltk.word_tokenize(data)\n  for i in range(0, len(words) - 1):\n    if words[i] == '.':\n      if classifier.classify(featureExtractor(words, i)[0]) == True:\n        print(\".\")\n      else:\n        print(words[i], end='')\n    else:\n      print(\"{} \".format(words[i]), end='')\n    print(words[-1])\n```", "```py\n# copied the text from https://en.wikipedia.org/wiki/India\ntraindata = \"India, officially the Republic of India (Bhārat Gaṇarājya),[e] is a country in South Asia. it is the seventh-largest country by area, the second-most populous country (with over 1.2 billion people), and the most populous democracy in the world. It is bounded by the Indian Ocean on the south, the Arabian Sea on the southwest, and the Bay of Bengal on the southeast. It shares land borders with Pakistan to the west;[f] China, Nepal, and Bhutan to the northeast; and Myanmar (Burma) and Bangladesh to the east. In the Indian Ocean, India is in the vicinity of Sri Lanka and the Maldives. India's Andaman and Nicobar Islands share a maritime border with Thailand and Indonesia.\"\n\ntestdata = \"The Indian subcontinent was home to the urban Indus Valley Civilisation of the 3rd millennium BCE. In the following millennium, the oldest scriptures associated with Hinduism began to be composed. Social stratification, based on caste, emerged in the first millennium BCE, and Buddhism and Jainism arose. Early political consolidations took place under the Maurya and Gupta empires; the later peninsular Middle Kingdoms influenced cultures as far as southeast Asia. In the medieval era, Judaism, Zoroastrianism, Christianity, and Islam arrived, and Sikhism emerged, all adding to the region's diverse culture. Much of the north fell to the Delhi sultanate; the south was united under the Vijayanagara Empire. The economy expanded in the 17th century in the Mughal Empire. In the mid-18th century, the subcontinent came under British East India Company rule, and in the mid-19th under British crown rule. A nationalist movement emerged in the late 19th century, which later, under Mahatma Gandhi, was noted for nonviolent resistance and led to India's independence in 1947.\"\n```", "```py\ntraindataset = getFeaturesets(traindata)\n```", "```py\nclassifier = nltk.NaiveBayesClassifier.train(traindataset)\n```", "```py\nsegmentTextAndPrintSentences(testdata)\n```", "```py\nimport nltk\nimport random\nimport feedparser\n```", "```py\nurls = {\n  'mlb': 'https://sports.yahoo.com/mlb/rss.xml',\n  'nfl': 'https://sports.yahoo.com/nfl/rss.xml',\n}\n```", "```py\nfeedmap = {}\n```", "```py\nstopwords = nltk.corpus.stopwords.words('english')\n```", "```py\ndef featureExtractor(words):\n  features = {}\n  for word in words:\n    if word not in stopwords:\n      features[\"word({})\".format(word)] = True\n    return features\n```", "```py\nsentences = []\n```", "```py\nfor category in urls.keys():\n```", "```py\nfeedmap[category] = feedparser.parse(urls[category])\n```", "```py\nprint(\"downloading {}\".format(urls[category]))\n```", "```py\nfor entry in feedmap[category]['entries']:\n```", "```py\ndata = entry['summary']\n```", "```py\nwords = data.split()\n```", "```py\nsentences.append((category, words))\n```", "```py\nfeaturesets = [(featureExtractor(words), category) for category, words in sentences]\nrandom.shuffle(featuresets)\n```", "```py\ntotal = len(featuresets)\noff = int(total/2)\ntrainset = featuresets[off:]\ntestset = featuresets[:off]\n```", "```py\nclassifier = nltk.NaiveBayesClassifier.train(trainset)\n```", "```py\nprint(nltk.classify.accuracy(classifier, testset))\n```", "```py\nclassifier.show_most_informative_features(5)\n```", "```py\nfor (i, entry) in enumerate(feedmap['nfl']['entries']):\n  if i < 4:\n    features = featureExtractor(entry['title'].split())\n    category = classifier.classify(features)\n    print('{} -> {}'.format(category, entry['title']))\n```", "```py\n\"What is your address when you're in Bangalore?\"\n\"the president's address on the state of the economy.\"\n```", "```py\nimport nltk\n```", "```py\n\nsentences = [\n  \"What is your address when you're in Bangalore?\",\n  \"the president's address on the state of the economy.\",\n  \"He addressed his remarks to the lawyers in the audience.\",\n  \"In order to address an assembly, we should be ready\",\n  \"He laughed inwardly at the scene.\",\n  \"After all the advance publicity, the prizefight turned out to be a laugh.\",\n  \"We can learn to laugh a little at even our most serious foibles.\"\n]\n```", "```py\n\ndef getSentenceWords():\n  sentwords = []\n  for sentence in sentences:\n    words = nltk.pos_tag(nltk.word_tokenize(sentence))\n    sentwords.append(words)\n    return sentwords\n\n```", "```py\n\ndef noContextTagger():\n  tagger = nltk.UnigramTagger(getSentenceWords())\n  print(tagger.tag('the little remarks towards assembly are laughable'.split()))\n```", "```py\n\ndef withContextTagger():\n```", "```py\ndef wordFeatures(words, wordPosInSentence):\n  # extract all the ing forms etc\n  endFeatures = {\n    'last(1)': words[wordPosInSentence][-1],\n    'last(2)': words[wordPosInSentence][-2:],\n    'last(3)': words[wordPosInSentence][-3:],\n  }\n  # use previous word to determine if the current word is verb or noun\n  if wordPosInSentence > 1:\n    endFeatures['prev'] = words[wordPosInSentence - 1]\n  else:\n    endFeatures['prev'] = '|NONE|'\n    return endFeatures\n```", "```py\nallsentences = getSentenceWords()\nfeatureddata = []\nfor sentence in allsentences:\n  untaggedSentence = nltk.tag.untag(sentence)\n  featuredsentence = [(wordFeatures(untaggedSentence, index), tag) for index, (word, tag) in enumerate(sentence)]\n  featureddata.extend(featuredsentence)\n```", "```py\nbreakup = int(len(featureddata) * 0.5)\ntraindata = featureddata[breakup:]\ntestdata = featureddata[:breakup]\n```", "```py\nclassifier = nltk.NaiveBayesClassifier.train(traindata)\n```", "```py\nprint(\"Accuracy of the classifier : {}\".format(nltk.classify.accuracy(classifier, testdata)))\n```", "```py\nnoContextTagger()\nwithContextTagger()\n```"]