["```py\nRecordReader imageReader = new ImageRecordReader(16, 16, false);\nimageReader.initialize(new FileSplit(new      \nFile(System.getProperty(\"user.home\"), \"image_location\")));\n```", "```py\nint numLinesToSkip = 0;\nString delimiter = \",\";\nRecordReader labelsReader = new    \nCSVRecordReader((numLinesToSkip,delimiter);\nlabelsReader.initialize(new FileSplit(new   \nFile(System.getProperty(\"user.home\"),\"labels.csv_file_location\"))\n```", "```py\nComposableRecordReader(imageReader,labelsReader);\n\n```", "```py\nDataSetIterator mnistTrain = new      \nMnistDataSetIterator(batchSize,true,12345);\nDataSetIterator mnistTest = new     \nMnistDataSetIterator(batchSize,false,12345);\n```", "```py\nMultiLayerConfiguration conf = new NeuralNetConfiguration.Builder() MultiLayerConfiguration.Builder builder = new  \nNeuralNetConfiguration.Builder() \n.seed(seed) \n.iterations(iterations)\n.regularization(true)\n.l2(0.0005) \n.learningRate(0.01)\n\n```", "```py\n.layer(0, new ConvolutionLayer.Builder(5, 5)\n\n```", "```py\n.nIn(nChannels)\n.stride(1, 1)\n.nOut(20)\n\n```", "```py\n.activation(\"identity\")\n.build())\n\n```", "```py\n.layer(1, new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType\n.MAX)\n.kernelSize(2,2)\n.stride(2,2)\n.build())\n```", "```py\n.layer(4, new DenseLayer.Builder().activation(\"relu\")\n.nOut(500).build())\n```", "```py\nMultiLayerNetwork model = new MultiLayerNetwork(getConfiguration());\nmodel.init();\n\n```", "```py\nint batchSize = 1024; \nint seed = 123;\nint labelIndex = 4; \nint iterations = 1\n\n```", "```py\nint numClasses = 10;\n\n```", "```py\nDataSetIterator iterator = new RecordReaderDataSetIterator(recordReader,batchSize,labelIndex,numClasses);\nDataSet batchData= iterator.next();\nbatchData.shuffle();\n\n```", "```py\nSplitTestAndTrain testAndTrain = batchData.splitTestAndTrain(0.70); \nDataSet trainingData = testAndTrain.getTrain();\nDataSet testData = testAndTrain.getTest();\n\ntrainAndTest =batchData.splitTestAndTrain(0.70);\ntrainInput = trainAndTest.getTrain();                \n\ntestInput.add(trainAndTest.getTest().getFeatureMatrix());\n```", "```py\nEvaluation eval = new Evaluation(numOfClasses);\nfor (int i = 0; i < testInput.size(); i++) \n{\n INDArray output = model.output(testInput.get(i));\n eval.eval(testLabels.get(i), output);\n}\n\n```", "```py\nmodel.fit(trainInput);\n\n```"]