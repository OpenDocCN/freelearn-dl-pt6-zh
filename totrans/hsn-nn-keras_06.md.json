["```py\nimport numpy as np\nimport h5py\nimport matplotlib.pyplot as plt\n# Function to load data\ndef load_dataset():\n# use h5py module and specify file path and mode (read) all_train_data=h5py.File('C:/Users/npurk/Desktop/Chapter_3_CNN/train_happy.h5', \"r\")\nall_test_data=h5py.File('C:/Users/npurk/Desktop/Chapter_3_CNN/test_happy.h5', \"r\")\n# Collect all train and test data from file as numpy arrays\nx_train = np.array(all_train_data[\"train_set_x\"][:]) \ny_train = np.array(all_train_data[\"train_set_y\"][:]) \nx_test = np.array(all_test_data[\"test_set_x\"][:])\ny_test = np.array(all_test_data[\"test_set_y\"][:]) \n# Reshape data\ny_train = y_train.reshape((1, y_train.shape[0]))\ny_test = y_test.reshape((1, y_test.shape[0]))    \nreturn x_train, y_train, x_test, y_test\n# Load the data \nX_train, Y_train, X_test, Y_test = load_dataset()\n```", "```py\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)\n\n(600, 64, 64, 3)\n(150, 64, 64, 3)\n(1, 600)\n(1, 150)\n\n# Plot out a single image plt.imshow(X_train[0]) # Print label for image (smiling = 1, frowning = 0) print (\"y = \" + str(np.squeeze(Y_train[:, 0])))\ny = 0\n```", "```py\n# Normalize pixels using max channel value, 255 (Rescale data)\n\nX_train = X_train/255.\nX_test = X_test/255.\n\n# Transpose labels\nY_train = Y_train.T\nY_test = Y_test.T\n\n# Print stats\nprint (\"Number of training examples : \" + str(X_train.shape[0]))\nprint (\"Number of test examples : \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))\n-----------------------------------------------------------------------\nOutput:\nNumber of training examples : 600\nNumber of test examples : 150\nX_train shape: (600, 64, 64, 3)\nY_train shape: (600, 1)\nX_test shape: (150, 64, 64, 3)\nY_test shape: (150, 1)\n```", "```py\n#convert to float 32 ndarrays\nfrom keras.utils import to_categorical\nX_train = X_train.astype('float32') X_test = X_test.astype('float32') Y_train = Y_train.astype('float32') Y_test = Y_test.astype('float32')\n```", "```py\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Activation, Dropout\nfrom keras.optimizers import Adam\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization \n```", "```py\nmodel=sequential()\n#First Convolutional layer \nmodel.add(Conv2D(16,(5,5), padding = 'same', activation = 'relu', input_shape = (64,64,3)))\nmodel.add(BatchNormalization())\n```", "```py\nmodel = Sequential()\n#First Convolutional layer \nmodel.add(Conv2D(16,(5,5), padding = 'same', activation = 'relu', input_shape = (64,64,3)))\nmodel.add(BatchNormalization())\n```", "```py\n#First Pooling layer \nmodel.add(MaxPooling2D(pool_size = (2,2)))\nmodel.add(Dropout(0.1))\n```", "```py\n#Second Convolutional layer \nmodel.add(Conv2D(32, (5,5), padding = 'same', activation = 'relu'))\nmodel.add(BatchNormalization())\n#Second Pooling layer \nmodel.add(MaxPooling2D(pool_size = (2,2)))\n#Dropout layer\nmodel.add(Dropout(0.1))\n#Flattening layer\nmodel.add(Flatten())\n#First densely connected layer\nmodel.add(Dense(128, activation = 'relu'))\n#Final output layer\nmodel.add(Dense(1, activation = 'sigmoid'))\n```", "```py\nmodel.summary()\n```", "```py\n! pip install keras-vis\n```"]