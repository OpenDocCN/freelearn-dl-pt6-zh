["```py\nnamesList = ['Tuffy','Ali','Nysha','Tim' ]\nsentence = 'My dog sleeps on sofa'\n```", "```py\nnames = ';'.join(namesList)\nprint(type(names), ':', names)\n```", "```py\n<class 'str'> : Tuffy;Ali;Nysha;Tim\n```", "```py\nwordList = sentence.split(' ')\nprint((type(wordList)), ':', wordList)\n```", "```py\n<class 'list'> : ['My', 'dog', 'sleeps', 'on', 'sofa']\n```", "```py\nadditionExample = 'ganehsa' + 'ganesha' + 'ganesha'\nmultiplicationExample = 'ganesha' * 2\nprint('Text Additions :', additionExample)\nprint('Text Multiplication :', multiplicationExample)\n```", "```py\nText Additions: ganehsaganeshaganesha\nText Multiplication: ganeshaganesha\n```", "```py\nstr = 'Python NLTK'\nprint(str[1])\nprint(str[-3])\n```", "```py\nOutput: <class 'str'> : Tuffy;Ali;Nysha;Tim\n<class 'list'> : ['My', 'dog', 'sleeps', 'on', 'sofa']\nText Additions : ganehsaganeshaganesha\nText Multiplication : ganeshaganesha\ny\nL\n```", "```py\nstr = 'NLTK Dolly Python'\n```", "```py\nprint('Substring ends at:',str[:4])\n```", "```py\nSubstring ends at: NLTK\n```", "```py\nprint('Substring starts from:',str[11:] )\n```", "```py\nSubstring starts from: Python\n```", "```py\nprint('Substring :',str[5:10])\n```", "```py\nSubstring : Dolly\n```", "```py\nprint('Substring fancy:', str[-12:-7])\nRun and check the output, it will be –\nSubstring fancy: Dolly\n```", "```py\nif 'NLTK' in str:\n  print('found NLTK')\n```", "```py\nfound NLTK\n```", "```py\nreplaced = str.replace('Dolly', 'Dorothy')\nprint('Replaced String:', replaced)\n```", "```py\nReplaced String: NLTK Dorothy Python\n```", "```py\nprint('Accessing each character:')\nfor s in replaced:\n  print(s)\n```", "```py\nOutput: Substring ends at: NLTK\nSubstring starts from: Python\nSubstring : Dolly\nSubstring fancy: Dolly\nfound NLTK\nReplaced String: NLTK Dorothy Python\nAccessing each character:\nN\nL\nT\nK\nD\no\nr\no\nt\nh\ny\nP\ny\nt\nh\no\nn\n```", "```py\npip install pypdf2\n```", "```py\nfrom PyPDF2 import PdfFileReader\n```", "```py\ndef getTextPDF(pdfFileName, password = '')\n```", "```py\npdf_file = open(pdfFileName, 'rb')\nread_pdf = PdfFileReader(pdf_file)\n```", "```py\nif password != '':\n  read_pdf.decrypt(password)\n```", "```py\ntext = []\nfor i in range(0,read_pdf.getNumPages()-1):\n  text.append(read_pdf.getPage(i).extractText())\n```", "```py\nreturn '\\n'.join(text)\n```", "```py\nimport pdf\n```", "```py\npdfFile = 'sample-one-line.pdf'\npdfFileEncrypted = 'sample-one-line.protected.pdf'\nprint('PDF 1: \\n',pdf.getTextPDF(pdfFile))\nprint('PDF 2: \\n',pdf.getTextPDF(pdfFileEncrypted,'tuffy'))\n```", "```py\nThis is a sample PDF document I am using to demonstrate in the tutorial.\n\nThis is a sample PDF document\n\npassword protected.\n```", "```py\npip install python-docx\n```", "```py\nimport docx\n```", "```py\ndef getTextWord(wordFileName):\n```", "```py\ndoc = docx.Document(wordFileName)\n```", "```py\nfullText = []\nfor para in doc.paragraphs:\n  fullText.append(para.text)\n```", "```py\nreturn '\\n'.join(fullText)\n```", "```py\nimport docx\nimport word\n```", "```py\ndocName = 'sample-one-line.docx'\nprint('Document in full :\\n',word.getTextWord(docName))\n```", "```py\nDocument in full :\n```", "```py\nThis is my TITLE.\nThis is my third paragraph.\n```", "```py\ndoc = docx.Document(docName)\nprint('Number of paragraphs :',len(doc.paragraphs))\nprint('Paragraph 2:',doc.paragraphs[1].text)\nprint('Paragraph 2 style:',doc.paragraphs[1].style)\n```", "```py\nNumber of paragraphs : 3\nParagraph 2: This is my TITLE.\nParagraph 2 style: _ParagraphStyle('Title') id: 4374023248\n```", "```py\nprint('Paragraph 1:',doc.paragraphs[0].text)\nprint('Number of runs in paragraph 1:',len(doc.paragraphs[0].runs))\nfor idx, run in enumerate(doc.paragraphs[0].runs):\n  print('Run %s : %s' %(idx,run.text))\n```", "```py\nprint('is Run 0 underlined:',doc.paragraphs[0].runs[5].underline)\nprint('is Run 2 bold:',doc.paragraphs[0].runs[1].bold)\nprint('is Run 7 italic:',doc.paragraphs[0].runs[3].italic)\n```", "```py\nOutput: Document in full :\nThis is a sample PDF document with some text in BOLD, some in ITALIC and some underlined. We are also embedding a Title down below.\nThis is my TITLE.\nThis is my third paragraph.\nNumber of paragraphs : 3\nParagraph 2: This is my TITLE.\nParagraph 2 style: _ParagraphStyle('Title') id: 4374023248\nParagraph 1: This is a sample PDF document with some text in BOLD, some in ITALIC and some underlined. We're also embedding a Title down below.\nNumber of runs in paragraph 1: 8\nRun 0 : This is a sample PDF document with\nRun 1 : some text in BOLD\nRun 2 : ,\nRun 3 : some in ITALIC\nRun 4 :  and\nRun 5 : some underlined.\nRun 6 :  We are also embedding a Title down below\nRun 7 : .\nis Run 0 underlined: True\nis Run 2 bold: True\nis Run 7 italic: True\n```", "```py\nimport os\nimport word, pdf\nfrom nltk.corpus.reader.plaintext import PlaintextCorpusReader\n```", "```py\ndef getText(txtFileName):\n  file = open(txtFileName, 'r')\n  return file.read()\n```", "```py\nnewCorpusDir = 'mycorpus/'\nif not os.path.isdir(newCorpusDir):\n  os.mkdir(newCorpusDir)\n```", "```py\ntxt1 = getText('sample_feed.txt')\n```", "```py\ntxt2 = pdf.getTextPDF('sample-pdf.pdf')\n```", "```py\ntxt3 = word.getTextWord('sample-one-line.docx')\n```", "```py\nfiles = [txt1,txt2,txt3]\nfor idx, f in enumerate(files):\n  with open(newCorpusDir+str(idx)+'.txt', 'w') as fout:\n    fout.write(f)\n```", "```py\nnewCorpus = PlaintextCorpusReader(newCorpusDir, '.*')\n```", "```py\nprint(newCorpus.words())\nprint(newCorpus.sents(newCorpus.fileids()[1]))\nprint(newCorpus.paras(newCorpus.fileids()[0]))\n```", "```py\nOutput: ['Five', 'months', '.', 'That', \"'\", 's', 'how', ...]\n[['A', 'generic', 'NLP'], ['(', 'Natural', 'Language', 'Processing', ')', 'toolset'], ...]\n[[['Five', 'months', '.']], [['That', \"'\", 's', 'how', 'long', 'it', \"'\", 's', 'been', 'since', 'Mass', 'Effect', ':', 'Andromeda', 'launched', ',', 'and', 'that', \"'\", 's', 'how', 'long', 'it', 'took', 'BioWare', 'Montreal', 'to', 'admit', 'that', 'nothing', 'more', 'can', 'be', 'done', 'with', 'the', 'ailing', 'game', \"'\", 's', 'story', 'mode', '.'], ['Technically', ',', 'it', 'wasn', \"'\", 't', 'even', 'a', 'full', 'five', 'months', ',', 'as', 'Andromeda', 'launched', 'on', 'March', '21', '.']], ...]\n```", "```py\npip install feedparser\n```", "```py\nimport feedparser\n```", "```py\nmyFeed = feedparser.parse(\"http://feeds.mashable.com/Mashable\")\n```", "```py\nprint('Feed Title :', myFeed['feed']['title'])\nprint('Number of posts :', len(myFeed.entries))\n```", "```py\nFeed Title: Mashable\nNumber of posts : 30\n```", "```py\npost = myFeed.entries[0]\nprint('Post Title :',post.title)\n```", "```py\nPost Title: The moon literally blocked the sun on Twitter\n```", "```py\ncontent = post.content[0].value\nprint('Raw content :\\n',content)\n```", "```py\nOutput: Feed Title: Mashable\nNumber of posts : 30\nPost Title: The moon literally blocked the sun on Twitter\nRaw content :\n<img alt=\"\" src=\"img/https%3A%2F%2Fblueprint-api-production.s3.amazonaws.com%2Fuploads%2Fcard%2Fimage%2F569570%2F0ca3e1bf-a4a2-4af4-85f0-1bbc8587014a.jpg\" /><div style=\"float: right; width: 50px;\"><a href=\"http://twitter.com/share?via=Mashable&text=The+moon+literally+blocked+the+sun+on+Twitter&url=http%3A%2F%2Fmashable.com%2F2017%2F08%2F21%2Fmoon-blocks-sun-eclipse-2017-twitter%2F%3Futm_campaign%3DMash-Prod-RSS-Feedburner-All-Partial%26utm_cid%3DMash-Prod-RSS-Feedburner-All-Partial\" style=\"margin: 10px;\">\n<p>The national space agency threw shade the best way it knows how: by blocking the sun. Yep, you read that right. </p>\n<div><div><blockquote>\n<p>HA HA HA I've blocked the Sun! Make way for the Moon<a href=\"https://twitter.com/hashtag/SolarEclipse2017?src=hash\">#SolarEclipse2017</a> <a href=\"https://t.co/nZCoqBlSTe\">pic.twitter.com/nZCoqBlSTe</a></p>\n<p>— NASA Moon (@NASAMoon) <a href=\"https://twitter.com/NASAMoon/status/899681358737539073\">August 21, 2017</a></p>\n</blockquote></div></div>\n```", "```py\npip install beautifulsoup4\n```", "```py\nfrom bs4 import BeautifulSoup\n```", "```py\nhtml_doc = open('sample-html.html', 'r').read()\nsoup = BeautifulSoup(html_doc, 'html.parser')\n```", "```py\nprint('\\n\\nFull text HTML Stripped:')\nprint(soup.get_text())\n```", "```py\nFull text HTML Stripped:\nSample Web Page\n\nMain heading\nThis is a very simple HTML document\nImprove your image by including an image.\nAdd a link to your favorite Web site.\nThis is a new sentence without a paragraph break, in bold italics.\nThis is purely the contents of our sample HTML document without any of the HTML tags.\n```", "```py\nprint('Accessing the <title> tag :', end=' ')\nprint(soup.title)\n```", "```py\nAccessing the <title> tag : <title>Sample Web Page</title>\n```", "```py\nprint('Accessing the text of <H1> tag :', end=' ')\nprint(soup.h1.string)\n```", "```py\nAccessing the text of <H1> tag : Main heading\n```", "```py\nprint('Accessing property of <img> tag :', end=' ')\nprint(soup.img['alt'])\n```", "```py\nAccessing property of <img> tag : A Great HTML Resource\n```", "```py\nprint('\\nAccessing all occurences of the <p> tag :')\nfor p in soup.find_all('p'):\n  print(p.string)\n```", "```py\nOutput: Full text HTML Stripped:\n\nSample Web Page\n\nMain heading\nThis is a very simple HTML document\nImprove your image by including an image.\n\nAdd a link to your favorite Web site.\n This is a new sentence without a paragraph break, in bold italics.\n\nAccessing the <title> tag : <title>Sample Web Page</title>\nAccessing the text of <H1> tag : Main heading\nAccessing property of <img> tag : A Great HTML Resource\n\nAccessing all occurences of the <p> tag :\nThis is a very simple HTML document\nImprove your image by including an image.\nNone\n```"]